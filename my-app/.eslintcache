[{"C:\\My_Project\\my-app\\src\\reportWebVitals.js":"1","C:\\My_Project\\my-app\\src\\index.js":"2","C:\\My_Project\\my-app\\src\\redux\\profile-reducer.js":"3","C:\\My_Project\\my-app\\src\\redux\\redux-store.js":"4","C:\\My_Project\\my-app\\src\\redux\\user-reducer.js":"5","C:\\My_Project\\my-app\\src\\redux\\auth-reducer.js":"6","C:\\My_Project\\my-app\\src\\App.js":"7","C:\\My_Project\\my-app\\src\\components\\Video\\Video.jsx":"8","C:\\My_Project\\my-app\\src\\components\\Security\\Security.jsx":"9","C:\\My_Project\\my-app\\src\\components\\Settings\\Settings.jsx":"10","C:\\My_Project\\my-app\\src\\components\\Dialogs\\DialogsContainer.jsx":"11","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileContainer.jsx":"12","C:\\My_Project\\my-app\\src\\components\\Login\\Login.jsx":"13","C:\\My_Project\\my-app\\src\\components\\Dialogs\\Dialogs.jsx":"14","C:\\My_Project\\my-app\\src\\components\\Header\\Header.jsx":"15","C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.jsx":"16","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.jsx":"17","C:\\My_Project\\my-app\\src\\redux\\dialogs-reducer.js":"18","C:\\My_Project\\my-app\\src\\components\\News\\News.jsx":"19","C:\\My_Project\\my-app\\src\\components\\Common\\Preloader\\Preloader.js":"20","C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.jsx":"21","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.jsx":"22","C:\\My_Project\\my-app\\src\\serviceWorker.js":"23","C:\\My_Project\\my-app\\src\\components\\Users\\Users.jsx":"24","C:\\My_Project\\my-app\\src\\components\\Dialogs\\Message\\Message.jsx":"25","C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\Posts\\Post.jsx":"26","C:\\My_Project\\my-app\\src\\components\\About_us\\About_us.jsx":"27","C:\\My_Project\\my-app\\src\\components\\Header\\HeaderContainer.jsx":"28","C:\\My_Project\\my-app\\src\\components\\Navbar\\Navbar.jsx":"29","C:\\My_Project\\my-app\\src\\api\\api.js":"30","C:\\My_Project\\my-app\\src\\components\\Profile\\Profile.jsx":"31","C:\\My_Project\\my-app\\src\\components\\hok\\withAuthRedirect.js":"32","C:\\My_Project\\my-app\\src\\components\\Music\\Music.jsx":"33","C:\\My_Project\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.jsx":"34","C:\\My_Project\\my-app\\src\\components\\Common\\FormControl\\FormsControls.js":"35","C:\\My_Project\\my-app\\src\\components\\validators\\validators.js":"36","C:\\My_Project\\my-app\\src\\redux\\sidebar-reducer.js":"37","C:\\My_Project\\my-app\\src\\components\\Users\\UsersContainer.jsx":"38","C:\\My_Project\\my-app\\src\\redux\\app-reducer.js":"39","C:\\My_Project\\my-app\\src\\redux\\users-selectors.js":"40","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks..jsx":"41","C:\\My_Project\\my-app\\src\\components\\utilites\\object-helpers.js":"42","C:\\My_Project\\my-app\\src\\components\\Common\\Paginator\\Paginator.jsx":"43","C:\\My_Project\\my-app\\src\\components\\Users\\User.jsx":"44","C:\\My_Project\\my-app\\src\\components\\hok\\withSuspence.js":"45","C:\\SPA_socialNetwork\\my-app\\src\\serviceWorker.js":"46","C:\\SPA_socialNetwork\\my-app\\src\\components\\Music\\Music.jsx":"47","C:\\SPA_socialNetwork\\my-app\\src\\components\\Video\\Video.jsx":"48","C:\\SPA_socialNetwork\\my-app\\src\\components\\Security\\Security.jsx":"49","C:\\SPA_socialNetwork\\my-app\\src\\components\\News\\News.jsx":"50","C:\\SPA_socialNetwork\\my-app\\src\\components\\Settings\\Settings.jsx":"51","C:\\SPA_socialNetwork\\my-app\\src\\components\\About_us\\About_us.jsx":"52","C:\\SPA_socialNetwork\\my-app\\src\\redux\\app-reducer.ts":"53","C:\\SPA_socialNetwork\\my-app\\src\\redux\\auth-reducer.ts":"54","C:\\SPA_socialNetwork\\my-app\\src\\redux\\dialogs-reducer.ts":"55","C:\\SPA_socialNetwork\\my-app\\src\\redux\\sidebar-reducer.ts":"56","C:\\SPA_socialNetwork\\my-app\\src\\redux\\profile-reducer.ts":"57","C:\\SPA_socialNetwork\\my-app\\src\\redux\\user-reducer.ts":"58","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\Paginator\\Paginator.tsx":"59","C:\\SPA_socialNetwork\\my-app\\src\\redux\\redux-store.ts":"60","C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\UsersContainer.tsx":"61","C:\\SPA_socialNetwork\\my-app\\src\\redux\\users-selectors.ts":"62","C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\Users.tsx":"63","C:\\SPA_socialNetwork\\my-app\\src\\api\\api.ts":"64","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"65","C:\\SPA_socialNetwork\\my-app\\src\\components\\Login\\Login.tsx":"66","C:\\SPA_socialNetwork\\my-app\\src\\components\\validators\\validators.ts":"67","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\FormControl\\FormsControls.tsx":"68","C:\\SPA_socialNetwork\\my-app\\src\\api\\profile-api.ts":"69","C:\\SPA_socialNetwork\\my-app\\src\\api\\users-api.ts":"70","C:\\SPA_socialNetwork\\my-app\\src\\api\\auth-api.ts":"71","C:\\SPA_socialNetwork\\my-app\\src\\api\\security-api.ts":"72","C:\\SPA_socialNetwork\\my-app\\src\\components\\utilites\\object-helpers.ts":"73","C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx":"74","C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\Dialogs.tsx":"75","C:\\SPA_socialNetwork\\my-app\\src\\App.tsx":"76","C:\\SPA_socialNetwork\\my-app\\src\\components\\hok\\withSuspence.tsx":"77","C:\\SPA_socialNetwork\\my-app\\src\\components\\hok\\withAuthRedirect.tsx":"78","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileContainer.tsx":"79","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\Profile.tsx":"80","C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\User.tsx":"81","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"82","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"83","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"84","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\FormControl\\AddPostForm.tsx":"85","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"86","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\Posts\\Post.tsx":"87","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks..tsx":"88","C:\\SPA_socialNetwork\\my-app\\src\\index.tsx":"89","C:\\SPA_socialNetwork\\my-app\\src\\components\\Navbar\\Navbar.tsx":"90","C:\\SPA_socialNetwork\\my-app\\src\\components\\Header\\HeaderContainer.tsx":"91","C:\\SPA_socialNetwork\\my-app\\src\\components\\Header\\Header.tsx":"92","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx":"93","C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"94","C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx":"95","C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\UsersSearchForm.tsx":"96","C:\\SPA_socialNetwork\\my-app\\src\\redux\\auth-selectors.ts":"97"},{"size":362,"mtime":1610361012379,"results":"98","hashOfConfig":"99"},{"size":981,"mtime":1606739651000,"results":"100","hashOfConfig":"101"},{"size":3988,"mtime":1612772264019,"results":"102","hashOfConfig":"101"},{"size":1489,"mtime":1612795869988,"results":"103","hashOfConfig":"101"},{"size":6436,"mtime":1612886917271,"results":"104","hashOfConfig":"101"},{"size":2257,"mtime":1612771095847,"results":"105","hashOfConfig":"101"},{"size":3348,"mtime":1612971639651,"results":"106","hashOfConfig":"101"},{"size":182,"mtime":1598536330000,"results":"107","hashOfConfig":"101"},{"size":194,"mtime":1598536518000,"results":"108","hashOfConfig":"101"},{"size":194,"mtime":1598536498000,"results":"109","hashOfConfig":"101"},{"size":4152,"mtime":1610442779201,"results":"110","hashOfConfig":"101"},{"size":1635,"mtime":1610639328081,"results":"111","hashOfConfig":"101"},{"size":1801,"mtime":1610617678581,"results":"112","hashOfConfig":"101"},{"size":4133,"mtime":1610468638261,"results":"113","hashOfConfig":"101"},{"size":521,"mtime":1612965874221,"results":"114","hashOfConfig":"101"},{"size":3131,"mtime":1612441896117,"results":"115","hashOfConfig":"101"},{"size":1187,"mtime":1610351042392,"results":"116","hashOfConfig":"101"},{"size":2390,"mtime":1610442717683,"results":"117","hashOfConfig":"101"},{"size":178,"mtime":1598536904000,"results":"118","hashOfConfig":"101"},{"size":240,"mtime":1607424872677,"results":"119","hashOfConfig":"101"},{"size":1612,"mtime":1610444931260,"results":"120","hashOfConfig":"101"},{"size":624,"mtime":1612182650382,"results":"121","hashOfConfig":"101"},{"size":5085,"mtime":499162500000,"results":"122","hashOfConfig":"101"},{"size":1493,"mtime":1612886957509,"results":"123","hashOfConfig":"101"},{"size":198,"mtime":1598956054000,"results":"124","hashOfConfig":"101"},{"size":453,"mtime":1612968083623,"results":"125","hashOfConfig":"101"},{"size":194,"mtime":1598537062000,"results":"126","hashOfConfig":"101"},{"size":544,"mtime":1610633851784,"results":"127","hashOfConfig":"101"},{"size":1372,"mtime":1607072372000,"results":"128","hashOfConfig":"101"},{"size":2038,"mtime":1610528088558,"results":"129","hashOfConfig":"101"},{"size":598,"mtime":1609258725008,"results":"130","hashOfConfig":"101"},{"size":578,"mtime":1608639113752,"results":"131","hashOfConfig":"101"},{"size":187,"mtime":1598536616000,"results":"132","hashOfConfig":"101"},{"size":313,"mtime":1600348296000,"results":"133","hashOfConfig":"101"},{"size":821,"mtime":1610470846032,"results":"134","hashOfConfig":"101"},{"size":262,"mtime":1610468081240,"results":"135","hashOfConfig":"101"},{"size":142,"mtime":1606376272000,"results":"136","hashOfConfig":"101"},{"size":5157,"mtime":1612171759933,"results":"137","hashOfConfig":"101"},{"size":1407,"mtime":1610638226393,"results":"138","hashOfConfig":"101"},{"size":1171,"mtime":1612775278168,"results":"139","hashOfConfig":"101"},{"size":1710,"mtime":1612257042339,"results":"140","hashOfConfig":"101"},{"size":312,"mtime":1612775290703,"results":"141","hashOfConfig":"101"},{"size":1483,"mtime":1612886934838,"results":"142","hashOfConfig":"101"},{"size":2134,"mtime":1612862403399,"results":"143","hashOfConfig":"101"},{"size":307,"mtime":1612956600293,"results":"144","hashOfConfig":"101"},{"size":5085,"mtime":499162500000,"results":"145","hashOfConfig":"146"},{"size":187,"mtime":1598536616000,"results":"147","hashOfConfig":"146"},{"size":182,"mtime":1598536330000,"results":"148","hashOfConfig":"146"},{"size":194,"mtime":1598536518000,"results":"149","hashOfConfig":"146"},{"size":178,"mtime":1598536904000,"results":"150","hashOfConfig":"146"},{"size":194,"mtime":1598536498000,"results":"151","hashOfConfig":"146"},{"size":194,"mtime":1598537062000,"results":"152","hashOfConfig":"146"},{"size":2212,"mtime":1614348485970,"results":"153","hashOfConfig":"146"},{"size":4550,"mtime":1614528389766,"results":"154","hashOfConfig":"146"},{"size":2983,"mtime":1614597304252,"results":"155","hashOfConfig":"146"},{"size":187,"mtime":1613813559624,"results":"156","hashOfConfig":"146"},{"size":7871,"mtime":1614793462259,"results":"157","hashOfConfig":"146"},{"size":8630,"mtime":1616569818816,"results":"158","hashOfConfig":"146"},{"size":1809,"mtime":1613912068867,"results":"159","hashOfConfig":"146"},{"size":2579,"mtime":1614585800874,"results":"160","hashOfConfig":"146"},{"size":831,"mtime":1616516444645,"results":"161","hashOfConfig":"146"},{"size":1393,"mtime":1615298655054,"results":"162","hashOfConfig":"146"},{"size":4087,"mtime":1617086851569,"results":"163","hashOfConfig":"146"},{"size":917,"mtime":1614936895712,"results":"164","hashOfConfig":"146"},{"size":1411,"mtime":1613925654318,"results":"165","hashOfConfig":"146"},{"size":2724,"mtime":1616519178674,"results":"166","hashOfConfig":"146"},{"size":378,"mtime":1614173642203,"results":"167","hashOfConfig":"146"},{"size":1938,"mtime":1614683882011,"results":"168","hashOfConfig":"146"},{"size":2162,"mtime":1614335516406,"results":"169","hashOfConfig":"146"},{"size":1149,"mtime":1616520918920,"results":"170","hashOfConfig":"146"},{"size":974,"mtime":1614335038537,"results":"171","hashOfConfig":"146"},{"size":334,"mtime":1614336034095,"results":"172","hashOfConfig":"146"},{"size":334,"mtime":1614532607878,"results":"173","hashOfConfig":"146"},{"size":1033,"mtime":1614617626885,"results":"174","hashOfConfig":"146"},{"size":2129,"mtime":1614598692305,"results":"175","hashOfConfig":"146"},{"size":8824,"mtime":1617093881769,"results":"176","hashOfConfig":"146"},{"size":367,"mtime":1614618757390,"results":"177","hashOfConfig":"146"},{"size":891,"mtime":1614620818117,"results":"178","hashOfConfig":"146"},{"size":3886,"mtime":1614795029227,"results":"179","hashOfConfig":"146"},{"size":1293,"mtime":1617094544225,"results":"180","hashOfConfig":"146"},{"size":2432,"mtime":1616516417462,"results":"181","hashOfConfig":"146"},{"size":5184,"mtime":1614794899348,"results":"182","hashOfConfig":"146"},{"size":1436,"mtime":1614792742617,"results":"183","hashOfConfig":"146"},{"size":2670,"mtime":1614683427269,"results":"184","hashOfConfig":"146"},{"size":940,"mtime":1614671172189,"results":"185","hashOfConfig":"146"},{"size":587,"mtime":1614793441702,"results":"186","hashOfConfig":"146"},{"size":584,"mtime":1614794055135,"results":"187","hashOfConfig":"146"},{"size":1867,"mtime":1614796206970,"results":"188","hashOfConfig":"146"},{"size":981,"mtime":1614799686141,"results":"189","hashOfConfig":"146"},{"size":1381,"mtime":1614797362577,"results":"190","hashOfConfig":"146"},{"size":766,"mtime":1614798837672,"results":"191","hashOfConfig":"146"},{"size":2115,"mtime":1617093703811,"results":"192","hashOfConfig":"146"},{"size":246,"mtime":1614799208773,"results":"193","hashOfConfig":"146"},{"size":384,"mtime":1614799140329,"results":"194","hashOfConfig":"146"},{"size":255,"mtime":1614798933621,"results":"195","hashOfConfig":"146"},{"size":2306,"mtime":1617015877449,"results":"196","hashOfConfig":"146"},{"size":406,"mtime":1617091784390,"results":"197","hashOfConfig":"146"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hve59r",{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"203"},"zvo2a7",{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"203"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"203"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"203"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"203"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"203"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"203"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"203"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"203"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"203"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"203"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"203"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"203"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"203"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"203"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"203"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"203"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"203"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"203"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"203"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"203"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"203"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"203"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"203"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"203"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"203"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"317"},"19jbvue",{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"317"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"317"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"317"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"317"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"317"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"317"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"333"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"333"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"333"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"333"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"333"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"333"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"333"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"333"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"367"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"333"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"333"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"333"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"333"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"333"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"333"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"333"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"333"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"333"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"333"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"333"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"333"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"333"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"333"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"333"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"333"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"333"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"333"},"C:\\My_Project\\my-app\\src\\reportWebVitals.js",[],"C:\\My_Project\\my-app\\src\\index.js",["448"],"\nimport store from './redux/redux-store';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\n\n//addPost('SAMURAIJS.COM');\n\n//  let rerenderEntireTree= (state)=> {\n    ReactDOM.render(\n        <BrowserRouter>\n        <Provider store={store}>\n        <App />\n        </Provider>\n        </BrowserRouter>, document.getElementById('root'));\n\n\n// }\n// rerenderEntireTree(store.getState()); -убрали с использованием ract-redux\n// store.subscribe(()=> {\n//     let state=store.getState();\n//     rerenderEntireTree(state);\n// });\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["449","450"],"C:\\My_Project\\my-app\\src\\redux\\profile-reducer.js",["451","452","453","454","455"],"import { profileAPI, usersAPI } from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, post: 'Hello, I try to be better', likesCount: 12 },\r\n        { id: 2, post: 'Hello, its my second post', likesCount: 69 },\r\n        { id: 3, post: 'ZZzzzZZZZ', likesCount: 241 },\r\n        { id: 4, post: 'Yo!Yo!YO!', likesCount: 245 },\r\n        { id: 5, post: 'HEYYYY MAN', likesCount: 364 }],\r\n    // newPostText: ' ', //Упразднено, редакс формы\r\n    profile: null,\r\n    status: ' '\r\n};\r\n\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 6,\r\n                // post: state.newPostText,\r\n                post: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n            // stateCopy.posts=[...state.posts];\r\n            // stateCopy.posts.push(newPost);\r\n            // stateCopy.newPostText = '';\r\n            // return stateCopy;\r\n        }\r\n        // // case UPDATE_NEW_POST_TEXT: {\r\n        // //     return {\r\n        // //         ...state,\r\n        // //         newPostText: action.newText\r\n        // //     }; -упразднено редакс формы\r\n        //     // stateCopy.newPostText = action.newText;\r\n        //     // return stateCopy;\r\n        // }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        };\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        };\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postID)\r\n            }\r\n        };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText })\r\n// export const updateNewPostTextActionCreator = (text) => ({ type: UPDATE_NEW_POST_TEXT, newText: text })\r\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status })\r\nexport const deletePost = (postID) => ({ type: DELETE_POST, postID })\r\n\r\nexport const getUserProfile = (userID) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    const response = await usersAPI.getProfile(userID)\r\n    //    .then(response => {\r\n    dispatch(setUserProfile(response.data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n\r\n}\r\n\r\nexport const getStatus = (userID) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    let response = await profileAPI.getStatus(userID);\r\n    // .then(response => {\r\n    dispatch(setStatus(response.data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    // });\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    let response = await profileAPI.updateStatus(status)\r\n    // .then(response => {\r\n    if (response.data.resultCode === 0) { //Если в ответе на запрос пришел резалтКод=0, то ошибки нет,статус сменился, сетаем статус\r\n        dispatch(setStatus(status)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    }\r\n    // });\r\n}\r\n\r\n\r\n\r\nexport default profileReducer;","C:\\My_Project\\my-app\\src\\redux\\redux-store.js",[],"C:\\My_Project\\my-app\\src\\redux\\user-reducer.js",["456"],"import { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../components/utilites/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOOGLE_IS_FETCHING = 'TOOGLE_IS_FETCHING';\r\nconst TOOGLE_IS_FOLLOWING_PROGRESS = 'TOOGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,   //В UsersContainer в State передаем\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n};\r\n\r\n\r\nexport const usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n                    return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                \r\n                //users:[...state.users],\r\n                // users: state.users.map(u => {                 // 6) Чтоб скопировать массив глубинно и значения массива изменялись, нужно добавить map();\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: true }\r\n                //     }\r\n                //     return u;\r\n\r\n                // })\r\n            }\r\n           \r\n        case UNFOLLOW:\r\n            \r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                // users:[...state.users],\r\n                // users: state.users.map(u => {                 // 6) Чтоб скопировать массив глубинно и значения массива изменялись, нужно добавить map();\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: false }\r\n                //     }\r\n                //     return u;\r\n\r\n                // })\r\n            }\r\n            \r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }  // 8) Берем пользователей из Action и подсовываем в state, перезатираем пользователей\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }  // 15) Отображение стр.пагинации пользователей\r\n\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }  // 16) Отображение пользователей\r\n\r\n        }\r\n\r\n        case TOOGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }  // 17) Отображение preloader\r\n\r\n        }\r\n        case TOOGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n\r\n                //Фильтруем массив пропускаем только ту ID которая не равна той ID которая пришла в action    \r\n                // Если у нас isFetching=true то в массив добавляем новую ID-шку                   \r\n            }      // Если у нас isFetching=false то создвем новый массив   \r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })   // 5) Создаем копию STATE,чтоб не копировать целиком объект (это не правильно, имьютабельность нарушится)\r\n\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })        // 7) Берем юзеров списком из сервака, установим их в State\r\n\r\nexport const setCurrentPage = (page) => ({ type: SET_CURRENT_PAGE, currentPage: page })\r\n\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOOGLE_IS_FETCHING, isFetching })\r\n\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));  //Я бизнес уровень,я активирую крутилку (загрузка, ожидание)\r\n        dispatch(setCurrentPage(page)); //Диспатчим текущую страницу\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        // .then(data => {\r\n\r\n        dispatch(toggleIsFetching(false));  //Я бизнес уровень,ответ с сервера пришел, крутилку выключаем\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        // });\r\n\r\n    }\r\n\r\n}\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => { //Рефакторинг.Общий метод.Универсальная функция для follow unfollow\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n//Создаем вторую санку, для follow\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default usersReducer;","C:\\My_Project\\my-app\\src\\redux\\auth-reducer.js",[],"C:\\My_Project\\my-app\\src\\App.js",["457"],"import React, { Component, Suspense } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, BrowserRouter, withRouter } from 'react-router-dom';\nimport Music from './components/Music/Music';\nimport Video from './components/Video/Video';\nimport Security from './components/Security/Security';\nimport News from './components/News/News';\nimport Settings from './components/Settings/Settings';\nimport About_us from './components/About_us/About_us';\nimport UsersContainer from './components/Users/UsersContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {initializeApp} from './redux/app-reducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { withSuspence } from './components/hok/withSuspence';\n\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Импорт компоненты с помощью lazy компонент\n\n// import ProfileContainer from './components/Profile/ProfileContainer';\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer')); // Импорт компоненты с помощью lazy компонент\n\nclass App extends Component {\n  componentDidMount () {\n        this.props.initializeApp();\n    }\n  render() {\n    // Если не проиницилизировались, верни нам прелоадер -загрузки экран\n    if (!this.props.initialized) { \n    return <Preloader/>\n    }\n     return (\n             <div className= 'app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        \n        <div className='app-wrapper-content'>\n          <Route path='/dialogs' \n          render={withSuspence(DialogsContainer)}/>\n          \n          <Route path='/profile/:userID?'render={()=> {\n                return <Suspense fallback={<div>Loading...</div>}> \n                {/* Пока компонента загружается,видим Loading */}\n          <ProfileContainer  />\n          </Suspense>\n          }}/>     \n          {/* :UserId-Добавляем путь к пользователю в ссылку. ?-означает,что параметр может отсутствовать */}\n          <Route path='/login'render={()=><Login  />}/>    \n          <Route path='/users'render={()=><UsersContainer />}/>\n          <Route path='/music' component={Music}/>\n          <Route path='/video' component={Video}/>\n          <Route path='/news' component={News}/>\n          <Route path='/settings' component={Settings}/>\n          <Route path='/security' component={Security}/>\n          <Route path='/about_us' component={About_us}/>\n        </div>\n                      \n        </div>  \n    \n         );\n  }\n}\nconst mapStateToProps=(state)=> ({\n  initialized:state.app.initialized //Обращение к BLL проинициализированы мы или нет, добавили в список редьюсеров используемый, закомбайнили редьюсер app\n})\n\nexport default compose (\n  withRouter,\n  connect (mapStateToProps, {initializeApp})) (App);\n","C:\\My_Project\\my-app\\src\\components\\Video\\Video.jsx",["458"],"import React from 'react';\r\nimport s from './/.//Video.module.css';\r\nconst Video= (props) => {\r\n  return (\r\n   <div>\r\n       Video\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Video;","C:\\My_Project\\my-app\\src\\components\\Security\\Security.jsx",["459"],"import React from 'react';\r\nimport s from './/.//Security.module.css';\r\nconst Security= (props) => {\r\n  return (\r\n   <div>\r\n       Security\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Security;","C:\\My_Project\\my-app\\src\\components\\Settings\\Settings.jsx",["460"],"import React from 'react';\r\nimport s from './/.//Settings.module.css';\r\nconst Settings= (props) => {\r\n  return (\r\n   <div>\r\n       Settings\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Settings;","C:\\My_Project\\my-app\\src\\components\\Dialogs\\DialogsContainer.jsx",["461","462"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport Dialogs from './Dialogs';\r\n\r\n// const DialogsContainer = () => {\r\n//   let newPostMessage = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании сообщения.Далее привяжем ссылку к текст Area */\r\n//   let addmessage = () => {\r\n//     let text = newPostMessage.current.value;\r\n//     alert(text);\r\n//   }\r\n  \r\n//   /*\r\n//   let dialogs = [\r\n//       {id:1, name:'Димасик'},\r\n//       {id:2, name:'Евген'},\r\n//       {id:3, name:'Искандер'},\r\n//       {id:4, name:'Дон Дьябло'},\r\n//       {id:5, name:'Андрей'}\r\n//   ]\r\n  \r\n  \r\n//   let messages = [\r\n//     {id:1, message:'Привет!)'},\r\n//     {id:2, message:'Как твои дела?'},\r\n//     {id:3, message:'У тебя все получится!'},\r\n//     {id:4, message:'Yo!Yo!YO!'},\r\n//     {id:5, message:'HEYYYY MAN'},\r\n//     {id:6, message:'Do you know? Enrique)'}\r\n//   ]\r\n//   */\r\n//   // let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\r\n\r\n\r\n//   // let messagesElements = state.messages.map(m => <Message message={m.message} />);\r\n\r\n//   // let newMessageBody = state.newMessageBody;                                  //МАПИМ,ДОСТАЕМ ИЗ ПРОПСОВ СООБЩЕНИЯ (ИЗ БИЗНЕС BLL УРОВНЯ ДОСТАЕМ)\r\n \r\n//   return <StoreContext.Consumer>  \r\n//     { store => {\r\n//       // let state = store.getState().dialogsPage;\r\n//       let onSendMessageClick = () => {\r\n//        store.dispatch(sendMessageCreator());\r\n//       }\r\n//       let onNewMessageChange = (body) => {\r\n//         // let body=e.target.value;\r\n//         store.dispatch(updateNewMessageBodyCreator(body));                     //Благодаря Диспатчу меняется уровень бизнеса BLL уровень\r\n//       }\r\n    \r\n//       return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//         sendMessage={onSendMessageClick}\r\n//         dialogsPage={store.getState().dialogsPage} />\r\n//     }\r\n//   }\r\n//   </StoreContext.Consumer>\r\n// }\r\nlet mapStateToProps=(state)=> {                            //Фун-ция Connect из React-Redux библиотеки забирает State и передает сначала в КОНТЕЙНЕРНУЮ компоненту потом в презентационную компоненту\r\nreturn {\r\n   dialogsPage: state.dialogsPage,\r\n  //  isAuth:state.auth.isAuth   //берем информацию из стэйта (redux-store) (редьюсеры) залогинены мы или нет, если нет,сообщения прячем\r\n}\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=> {                                  //Фун-ция Connect из React-Redux библиотеки забирает колбэки-функции и передает сначала в КОНТЕЙНЕРНУЮ компоненту потом в презентационную компоненту\r\n  return {\r\n    sendMessage: (newMessageBody)=> {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }   \r\n    // updateNewMessageBody:(body)=> {\r\n    //   dispatch(updateNewMessageBodyCreator(body));   //не будем апдэйдить на каждый клик, используем форму редакса \r\n    // }\r\n  }\r\n}\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer= connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);   //По этим правилам законнекть презентационную компоненту к Store через Контейнерную компоненту\r\n\r\nexport default compose (\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n// DialogsContainer;","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileContainer.jsx",["463"],"import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n componentDidMount () {\r\n  let userID=this.props.match.params.userID;\r\n  if (!userID) {\r\n    userID=this.props.authorizedUserID;\r\n    if(!userID) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n  }\r\n  this.props.getUserProfile(userID);\r\n  this.props.getStatus(userID);\r\n}\r\n\r\n\r\n\r\n render () {\r\n   \r\n\r\n    return (\r\n      <Profile {...this.props}\r\n      profile={this.props.profile} \r\n      status={this.props.status} \r\n      updateStatus={this.props.updateStatus}/>\r\n                 \r\n    )     \r\n    \r\n}\r\n}\r\nlet mapStateToProps =(state) => ({\r\n  profile:state.profilePage.profile,\r\n  status:state.profilePage.status,\r\n  authorizedUserID: state.auth.userId, //state-BLL уровень, auth-ветка там, где мы комбайним редьюсеры, userId-ID пользователя\r\n  isAuth:state.auth.isAuth\r\n });\r\nexport default compose (\r\n     connect(mapStateToProps,{getUserProfile, getStatus, updateStatus}),\r\n     withRouter,\r\n    //withAuthRedirect\r\n    )(ProfileContainer);\r\n      \r\n// let AuthRedirectComponent= withAuthRedirect(ProfileContainer);\r\n\r\n// let WithURLDataContainerComponent= withRouter(AuthRedirectComponent);\r\n// export default connect(mapStateToProps,{getUserProfile}) (WithURLDataContainerComponent);\r\n","C:\\My_Project\\my-app\\src\\components\\Login\\Login.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Dialogs\\Dialogs.jsx",["464","465","466"],"import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { TextArea } from '../Common/FormControl/FormsControls';\r\nimport { maxLengthCreator, required } from '../validators/validators';\r\nimport s from './/.//Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let newPostMessage = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании сообщения.Далее привяжем ссылку к текст Area */\r\n  let addmessage = () => {\r\n    let text = newPostMessage.current.value;\r\n    alert(text);\r\n  }\r\n  //  let state=props.store.getState().dialogsPage;\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  /*\r\n  let dialogs = [\r\n      {id:1, name:'Димасик'},\r\n      {id:2, name:'Евген'},\r\n      {id:3, name:'Искандер'},\r\n      {id:4, name:'Дон Дьябло'},\r\n      {id:5, name:'Андрей'}\r\n  ]\r\n  \r\n  \r\n  let messages = [\r\n    {id:1, message:'Привет!)'},\r\n    {id:2, message:'Как твои дела?'},\r\n    {id:3, message:'У тебя все получится!'},\r\n    {id:4, message:'Yo!Yo!YO!'},\r\n    {id:5, message:'HEYYYY MAN'},\r\n    {id:6, message:'Do you know? Enrique)'}\r\n  ]\r\n  */\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n  let newMessageBody = state.newMessageBody;                                  //МАПИМ,ДОСТАЕМ ИЗ ПРОПСОВ СООБЩЕНИЯ (ИЗ БИЗНЕС BLL УРОВНЯ ДОСТАЕМ)\r\n  // let onSendMessageClick = () => {\r\n  //   props.sendMessage();\r\n  //   // props.store.dispatch(sendMessageCreator());\r\n  // } //Заменили на addNewMessage\r\n  \r\n  // let onNewMessageChange = (e) => {\r\n  //   let body = e.target.value;\r\n  //   props.updateNewMessageBody(body);\r\n  //   // props.store.dispatch(updateNewMessageBodyCreator(body));                     //Благодаря Диспатчу меняется уровень бизнеса BLL уровень\r\n  // } //Обработчик события нам не нужен, так как стали использовать редакс форму\r\n\r\n  let addNewMessage = (values) => {\r\n    alert(values.newMessageBody);\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  \r\n  if (props.isAuth == false) return <Redirect to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n        {/* <DialogItem name={dialogs[0].name} id={dialogs[0].id}/>\r\n         <DialogItem name={dialogs[1].name} id={dialogs[1].id}/>*/}\r\n\r\n      </div>\r\n\r\n      <div className={s.messages}>\r\n        {/* <Message message={messagesData[0].message} id={messagesData[0].id}/> \r\n         <Message message={messagesData[1].message} id={messagesData[1].id }> */}\r\n        <div>{messagesElements}</div>\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\n\r\nconst AddMessageForm=(props)=> {\r\nreturn (\r\n<form onSubmit={props.handleSubmit}>\r\n          <div>\r\n            <Field component={TextArea} \r\n            validate={[required, maxLength50]}\r\n            name=\"newMessageBody\" placeholder=\"Напишите сообщение\" />\r\n            {/* <textarea value={newMessageBody} onChange={onNewMessageChange} placeholder='Напишите сообщение' ></textarea>  //Вызывает функцию onNewMessageChange по изменению текста */}\r\n            </div> \r\n          {/* <div><button onClick={onSendMessageClick}>Отправить</button></div> */}\r\n          <div><button>Отправить</button></div>\r\n        </form>\r\n)\r\n}\r\nconst AddMessageFormRedux=reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n\r\nexport default Dialogs;","C:\\My_Project\\my-app\\src\\components\\Header\\Header.jsx",["467"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './/.//Header.module.css';\r\nimport Logo from '../../Pirojkov.png'\r\n\r\nconst Header = (props) => {\r\n       return <header className='header'>\r\n        <img className='logo' src={Logo}/>\r\n\r\n    <div className={s.LoginBlock}>\r\n        {props.isAuth? \r\n        <div> {props.login}-<button onClick={props.logout}>Log out</button> </div>\r\n  : <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n\r\n     </header>\r\n\r\n}\r\nexport default Header;","C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.jsx",["468","469","470","471","472"],"import React, { Component, PureComponent } from 'react';\r\nimport s from '..//MyPosts/MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../validators/validators';\r\nimport { TextArea } from '../../Common/FormControl/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nlet AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <Field name=\"newPostText\" component={TextArea}\r\n      validate={[required, maxLength10]} />\r\n    {/* <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} /> */}\r\n    {/* <div><button onClick={onAddPost}>Добавить пост</button> */}\r\n    <div><button>Добавить пост</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: \"profileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts= React.memo(props=> {\r\n\r\n\r\n// shouldComponentUpdate (nextProps, nextState) { // true false, если пропсы пришли другие то возвращаем true и отрисовываем компоненту нужно обновить ее\r\n// return nextProps !=this.props || nextState !=this.state;\r\n// }  этот метод жизненного цикла можно заменить наследованием PureComponent чистой компонентой от реакта\r\n\r\n  let newPostElement = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании поста.Далее привяжем ссылку к текст Area */\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n    // props.dispatch(addPostActionCreator());\r\n  }\r\n\r\n  // let onPostChange = () => {\r\n  //   let text = newPostElement.current.value;\r\n  //   props.updateNewPostText(text);\r\n  //   //  let action ={type:'UPDATE-NEW-POST-TEXT', newText:text};\r\n  //   // let action=updateNewPostTextActionCreator(text);\r\n  //   //    props.dispatch(action);\r\n  // } //Упразднено т.к используем форму редакс\r\n\r\n  /*\r\n  let posts=[\r\n    {id:1, post:'Hello, I try to be better', likesCount:12},\r\n    {id:2, post:'Hello, its my second post', likesCount:69},\r\n    {id:3, post:'ZZzzzZZZZ',likesCount:241},\r\n    {id:4, post:'Yo!Yo!YO!',likesCount:245},\r\n    {id:5, post:'HEYYYY MAN',likesCount:364}\r\n  ]\r\n  */\r\n\r\n  let postsElements =\r\n    props.posts.map(p => <Post message={p.post} likesCount={p.likesCount} />);\r\n\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>Мои записи</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      {/* //Когда сасабмитиится форма вызовем колбэк и мы получим все данные из формы  */}\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport default MyPosts;\r\n","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.jsx",["473"],"import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n  \r\n\r\n  state = {\r\n    editMode: false,\r\n    status:this.props.status\r\n      }\r\n\r\nactivateEditMode (){\r\n  this.setState({\r\n    editMode:true,\r\n  })\r\n\r\n}\r\ndeactivateEditMode (){\r\n  this.setState({\r\n    editMode:false,\r\n    \r\n  });\r\n  this.props.updateStatus(this.state.status);\r\n  }\r\n  onStatusChange=(e) => {\r\n    this.setState({\r\n      status:e.currentTarget.value\r\n    }); \r\n    \r\n  }\r\n\r\ncomponentDidUpdate (prevProps, prevState) {\r\n  if(prevProps.status !==this.props.status) {\r\n    this.setState({\r\n      status:this.props.status\r\n    });\r\n  }\r\n\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode &&\r\n          <div>\r\n            <span onDoubleClick={ this.activateEditMode.bind(this) }> {this.props.status || \"-----\"}</span>\r\n          </div>\r\n        }\r\n        {this.state.editMode &&\r\n          <div>\r\n            <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.state.status} />\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ProfileStatus;\r\n","C:\\My_Project\\my-app\\src\\redux\\dialogs-reducer.js",[],"C:\\My_Project\\my-app\\src\\components\\News\\News.jsx",["474"],"import React from 'react';\r\nimport s from './/.//News.module.css';\r\nconst News= (props) => {\r\n  return (\r\n   <div>\r\n       News\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default News;","C:\\My_Project\\my-app\\src\\components\\Common\\Preloader\\Preloader.js",["475"],"import React from 'react';\r\nimport Ajux_loader from '../../../assets/images/Ajux_loader.gif'\r\n\r\n\r\nlet Preloader=(props)=> {\r\nreturn <div>\r\n    <img src={Ajux_loader} style={{backgroundColor:''}}/>\r\n</div>\r\n}\r\n\r\n\r\nexport default Preloader;\r\n","C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.jsx",["476","477"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\n\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//   // let state=props.store.getState();\r\n\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {\r\n//         store => {\r\n//           let state = store.getState();\r\n//           let addPost = () => {\r\n//             store.dispatch(addPostActionCreator());\r\n//           }\r\n//           let onPostChange = (text) => {\r\n\r\n//             let action = updateNewPostTextActionCreator(text);\r\n//             store.dispatch(action);\r\n//           }\r\n//           return <MyPosts updateNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             posts={state.profilePage.posts}\r\n//             newPostText={state.profilePage.newPostText} />\r\n//         }\r\n//       }\r\n//     </StoreContext.Consumer>\r\n//   )\r\n\r\n// }\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // updateNewPostText: (text) => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //   dispatch(action);\r\n    // },упразднен с использованием форм редакса\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\nexport default MyPostsContainer;\r\n","C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.jsx",["478","479"],"import React from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.';\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n    return (\r\n    <div className={s.descriptionBlock}>\r\n       <img src={props.profile.photos.large}/>\r\n      INFORMATION+AVA+DESCRIPTION\r\n      <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n    </div>  \r\n    )\r\n       \r\n}\r\nexport default ProfileInfo;\r\n","C:\\My_Project\\my-app\\src\\serviceWorker.js",[],"C:\\My_Project\\my-app\\src\\components\\Users\\Users.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Dialogs\\Message\\Message.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Profile\\MyPosts\\Posts\\Post.jsx",["480"],"import React from 'react';\r\nimport s from '..//Posts/Post.module.css';\r\nimport avaPost from '..//../../../assets/images/bat.png'\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n          <div className={s.item}>\r\n          <img className='logo' src={avaPost}/>\r\n            {props.message}\r\n          \r\n          <div>\r\n            <span>like</span> {props.likesCount}\r\n          </div>\r\n          </div>\r\n          \r\n         )\r\n}\r\nexport default Post;\r\n","C:\\My_Project\\my-app\\src\\components\\About_us\\About_us.jsx",["481"],"import React from 'react';\r\nimport s from './/.//About_us.module.css';\r\nconst About_us= (props) => {\r\n  return (\r\n   <div>\r\n       About_us\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default About_us;","C:\\My_Project\\my-app\\src\\components\\Header\\HeaderContainer.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Navbar\\Navbar.jsx",[],"C:\\My_Project\\my-app\\src\\api\\api.js",[],"C:\\My_Project\\my-app\\src\\components\\Profile\\Profile.jsx",["482","483","484"],"import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\r\nimport GORA from '../..//assets/images/GORA.png';\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n    <div>\r\n    <div>\r\n     <img className='' src={GORA}/>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n      \r\n    </div>    \r\n    </div> \r\n    )     \r\n    \r\n}\r\nexport default Profile;\r\n","C:\\My_Project\\my-app\\src\\components\\hok\\withAuthRedirect.js",[],"C:\\My_Project\\my-app\\src\\components\\Music\\Music.jsx",["485"],"import React from 'react';\r\nimport s from './/.//Music.module.css';\r\nconst Music= (props) => {\r\n  return (\r\n   <div>\r\n       Music!!!!!\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Music;","C:\\My_Project\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Common\\FormControl\\FormsControls.js",[],"C:\\My_Project\\my-app\\src\\components\\validators\\validators.js",[],"C:\\My_Project\\my-app\\src\\redux\\sidebar-reducer.js",[],"C:\\My_Project\\my-app\\src\\components\\Users\\UsersContainer.jsx",["486","487","488","489","490","491"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { follow, setUsers, unfollow, setCurrentPage, setTotalUsersCount, toggleIsFetching, toggleFollowingProgress, requestUsers } from '../../redux/user-reducer';\r\nimport * as axios from 'axios';\r\nimport Users from './Users';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { usersAPI } from '../../api/api';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport {getPageSize,getTotalUsersCount,getCurrentPage,getIsFetching,getFollowingInProgress, getUsers} from '../../redux/users-selectors';\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component {           //extends React.Component-благодаря этой записи Реакт за кадром напишет new User и создаст нового пользователя.При этом constructor(props), super(props) можно не писать, делегирование и прокдывание пропсов произойдет за кадром в реакт\r\n\r\n    componentDidMount() {\r\n                 this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n            }\r\n\r\n  onPageChanged=(pageNumber) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize);\r\n      }\r\n    render() {\r\n       \r\n\r\n        return <>\r\n        {this.props.isFetching ? \r\n        <Preloader/>: null}\r\n        <Users totalUsersCount={this.props.totalUsersCount}\r\n        pageSize={this.props.pageSize}\r\n        currentPage={this.props.currentPage}\r\n        onPageChanged={this.onPageChanged}\r\n        users={this.props.users}\r\n        follow={this.props.follow}\r\n        unfollow={this.props.unfollow}\r\n        // toggleFollowingProgress={this.props.toggleFollowingProgress}  \r\n        followingInProgress={this.props.followingInProgress}  \r\n        />\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//Используем для создания селектора\r\n// let mapStateToProps = (state) =>{                // mapStateToProps-функция- принимает весь глобальный стэйт целиком и возвращает объект с данными который нам нужен в данной, контейнерной компоненте\r\n// return {\r\n//     users:state.usersPage.users,                // Компонента получает USERS, то есть в презентационной (чистой) компоненте будет users   \r\n//     pageSize:state.usersPage.pageSize,\r\n//     totalUsersCount:state.usersPage.totalUsersCount,  \r\n//     currentPage:state.usersPage.currentPage,\r\n//     isFetching:state.usersPage.isFetching,\r\n//     followingInProgress:state.usersPage.followingInProgress  \r\n// }\r\nlet mapStateToProps = (state) =>{                // mapStateToProps-функция- принимает весь глобальный стэйт целиком и возвращает объект с данными который нам нужен в данной, контейнерной компоненте\r\n  return {\r\n      users:getUsers(state),\r\n      // users:getUsersSelector(state),                // Компонента получает USERS, то есть в презентационной (чистой) компоненте будет users   \r\n      pageSize:getPageSize(state),\r\n      totalUsersCount:getTotalUsersCount(state), \r\n      currentPage:getCurrentPage(state),\r\n      isFetching:getIsFetching(state),\r\n      followingInProgress:getFollowingInProgress(state)\r\n  }\r\n\r\n\r\n}\r\n// let mapDispatchToProps =(dispatch)=> {                 // Компонента получает callback-и которые может вызвать\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId));            // Диспатчим, передаем результат работы ActionCratora-\r\n//         },\r\n//         unfollow: (userId) => {\r\n//             dispatch(unfollowAC(userId));            // Диспатчим, передаем результат работы ActionCratora-\r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setCurrentPage: (pageNumber)=> {\r\n//             dispatch(setCurrentPageAC(pageNumber));\r\n//         },\r\n//         setTotalUsersCount: (totalCount)=> {\r\n//             dispatch(setTotalUsersCountAC(totalCount));\r\n//         },\r\n//         toggleIsFetching: (isFetching)=> {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//         }\r\n        \r\n//     }\r\n\r\n// }\r\n\r\n// let withRedirect=withAuthRedirect(UsersContainer)\r\n// export default connect (mapStateToProps, \r\n// {follow, unfollow,setCurrentPage,toggleFollowingProgress, getUsers}) (withRedirect);      // Путь до функциональной (или классовой) компоненты к которой хотим достучаться. App.js->UserContainer->UsersC\r\n\r\nexport default compose(\r\n  // withAuthRedirect,\r\n  connect (mapStateToProps,{follow, unfollow,setCurrentPage,toggleFollowingProgress, getUsers: requestUsers})\r\n)(UsersContainer)","C:\\My_Project\\my-app\\src\\redux\\app-reducer.js",["492","493"],"import { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/api\";\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\n\r\n\r\nlet initialState= {\r\n    initialized: false\r\n};\r\n\r\n\r\nconst appReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: \r\n             return {\r\n             ...state, \r\n             initialized: true //Стэйт копируем для того,что если будет еще экшен не перезатер наше состояние state\r\n         }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const inintializedSuccess= () => ({ type: INITIALIZED_SUCCESS }) //Задиспатчик экшен криэйтор\r\n\r\nexport const initializeApp=()=>(dispatch)=>{  //Создаем САНКУ санк криэйтор для инициализации\r\n         let promise= dispatch(getAuthUserData());  //Диспатч не только передает вызов фкункции но и возвращает результат выполнения функции return \r\n         //dispatch(somethingElse());\r\n         //dispatch(somethingElse());\r\n            Promise.all([promise])\r\n            .then(()=>{\r\n             dispatch(inintializedSuccess());\r\n         });        \r\n}       \r\n\r\n\r\nexport default appReducer;","C:\\My_Project\\my-app\\src\\redux\\users-selectors.js",[],"C:\\My_Project\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks..jsx",["494"],"import React, { useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  // let stateWithSetState=useState(false);\r\n  // let editMode=stateWithSetState[0];\r\n  // let setEditMode= stateWithSetState[1];\r\n  let [editMode,setEditMode]=useState(false); //Деструктуризация массива (локальный стэйт,изменятся ли статус?)\r\n  let [status,setStatus]=useState(props.status); //Деструктуризация массива (локальный стэйт,что в статусе печатают, как изменяется?)\r\n\r\n  useEffect ( ()=>{         //Используем хук useEffect для синхронизации статуса,перерисует статус при его изменении\r\n    setStatus(props.status);  \r\n  }, [props.status]); //Синхронизируйся, когда изменится статус[props.status]\r\n\r\n  const activateEditMode=() =>{\r\n    setEditMode(true);\r\n  }\r\n  \r\n  const deactivateEditMode=() =>{\r\n    setEditMode(false);\r\n    props.updateStatus(status);//должны отправлять наверх родителю в стэйт инфу о статусе\r\n  }\r\n  const onStatusChange=(e) => {\r\n    setStatus(e.currentTarget.value); \r\n      }\r\n\r\n    return (\r\n  <div>\r\n    { !editMode &&\r\n      <div>\r\n        <span onDoubleClick={activateEditMode} > {props.status || \"-----\"}</span>\r\n      </div>\r\n    }\r\n    {editMode &&\r\n      <div>\r\n        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n      </div>\r\n    }\r\n  </div>\r\n)\r\n  }\r\nexport default ProfileStatusWithHooks;\r\n","C:\\My_Project\\my-app\\src\\components\\utilites\\object-helpers.js",[],"C:\\My_Project\\my-app\\src\\components\\Common\\Paginator\\Paginator.jsx",[],"C:\\My_Project\\my-app\\src\\components\\Users\\User.jsx",["495"],"import React from 'react';\r\nimport userPhoto from '../../assets/images/User.png';\r\nimport styles from './users.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nlet User = ({user,followingInProgress,unfollow,follow}) => {\r\n       return (\r\n       <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed \r\n                            ? <button disabled={followingInProgress\r\n                                .some( id=>id===user.id)} \r\n                                onClick={() => {unfollow(user.id)}}> \r\n                                Unfollow</button>       // /* // В пропсах обращаемся к follow props.follow(u.id), так как в UserContainer в mapDispatchToProps у нас есть такая функция, принимает пользовательский id - */                                 \r\n                        : <button disabled={followingInProgress.some(id=>id===user.id)} \r\n                            onClick={() => {follow(user.id) }}>  \r\n                            {/* //Если хотябы кто кто нибудь из этого массива some равен (true) id пользователя то метод some вернет true */}\r\n                                                                  \r\n                            Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n\r\n            </div>)\r\n        }\r\n\r\nexport default User;","C:\\My_Project\\my-app\\src\\components\\hok\\withSuspence.js",["496","497"],"import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const withSuspence=(Component)=> {\r\n\r\n  return (props)=> {\r\n  return  <Suspense fallback={<div>Loading...</div>}> \r\n  <Component {...props}/>\r\n  </Suspense>\r\n  };\r\n} ","C:\\SPA_socialNetwork\\my-app\\src\\serviceWorker.js",[],["498","499"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Music\\Music.jsx",["500"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Video\\Video.jsx",["501"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Security\\Security.jsx",["502"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\News\\News.jsx",["503"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Settings\\Settings.jsx",["504"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\About_us\\About_us.jsx",["505"],"C:\\SPA_socialNetwork\\my-app\\src\\redux\\app-reducer.ts",["506","507"],"import { type } from \"os\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\nimport { InferActionsTypes } from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState= {\r\n    initialized: false\r\n};\r\nexport type InitialStateType =typeof initialState\r\ntype ActionsType=InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state:InitialStateType=initialState, action:ActionsType): InitialStateType=> {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: \r\n             return {\r\n             ...state, \r\n             initialized: true, //Стэйт копируем для того,что если будет еще экшен не перезатер наше состояние state\r\n            //  initializedFalse: true Благодаря явной типизации мы не можем ошибиться и добавить в стэйт лишнее\r\n         }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\n// type InintializedSuccessActionType={ //типизация старая не совсем правильная\r\n//     type: typeof INITIALIZED_SUCCESS // \"INITIALIZED_SUCCESS\"\r\n// }\r\n// export const inintializedSuccess= (): InintializedSuccessActionType  => ({ type:INITIALIZED_SUCCESS }) //Задиспатчик экшен криэйтор\r\n\r\nexport const actions={ //Типизация новая с применением упаковки всех экшенов в объект\r\n    inintializedSuccess:()=> ({ type:INITIALIZED_SUCCESS } as const)\r\n}\r\n\r\n\r\nexport const initializeApp=()=>(dispatch:any)=>{  //Создаем САНКУ санк криэйтор для инициализации\r\n         let promise= dispatch(getAuthUserData());  //Диспатч не только передает вызов фкункции но и возвращает результат выполнения функции return \r\n         //dispatch(somethingElse());\r\n         //dispatch(somethingElse());\r\n            Promise.all([promise])\r\n            .then(()=>{\r\n             dispatch(actions.inintializedSuccess());\r\n         });        \r\n}       \r\n\r\n\r\nexport default appReducer;",["508","509"],"C:\\SPA_socialNetwork\\my-app\\src\\redux\\auth-reducer.ts",["510"],"import { ResultCodesEnumForCaptcha } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { Action } from 'redux';\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\n// export type InitialStateType2 = { 2 способ задания явной типизации\r\n//     userId: number| null,\r\n//     email: string | null,\r\n//     login: string | null,\r\n//     isAuth: boolean | null,\r\n//     captchaUrl:string | null\r\n// };\r\n\r\n\r\nlet initialState= {\r\n    userId: null as number| null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean | null,\r\n    captchaUrl:null as string | null\r\n};\r\n\r\n\r\nconst authReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                //  isAuth:true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const actions= {\r\n    setAuthUserData :(userId:number | null, email:string | null, login:string | null, isAuth:boolean) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } } as const),       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\n    getCaptchaUrlSuccess: (captchaUrl:string)=> ({ type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } } as const) \r\n}\r\n// type SetAuthUserDataActionPayloadType={\r\n//     userId:number | null, \r\n//     email:string  | null, \r\n//     login:string  | null, \r\n//     isAuth:boolean\r\n// }\r\n// type SetAuthUserDataActionType={\r\n//     type:typeof SET_USER_DATA, \r\n//     payload: SetAuthUserDataActionPayloadType\r\n// }\r\n\r\n\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch:any) => {  //Создаем САНКУ санк криэйтор\r\n    let response = await authAPI.me();\r\n    // .then(response => {  bcgjkmpetv async await не нужна обертка и then избавляемся от промисов\r\n    if (response.data.resultCode === ResultCodesEnum.Success) { //Сравниваем со значением энамки, если успешно прошла логинизация (0),то авторизовались\r\n        let { id, login, email } = response.data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean, captcha:string):ThunkType => async (dispatch:any) => {  //Создаем САНКУ для логинизации санк криэйтор\r\n    let response = await authAPI.login(email, password, rememberMe,captcha);\r\n    // .then(response => {  \r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    }     \r\n    else {\r\n        if(response.data.resultCode === ResultCodesEnumForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", { _error: message }));\r\n\r\n    }\r\n}\r\nexport const logout = ():ThunkType => async (dispatch:any) => {  //Создаем САНКУ для логинизации санк криэйтор\r\n    let response = await authAPI.logout();\r\n    // .then(response => {  \r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch:any) => {  //Создаем САНКУ для каптчи санк криэйтор\r\n    let response = await securityAPI.getCaptchaUrl();\r\n      const captchaUrl= response.data.url;\r\n      dispatch(actions.getCaptchaUrlSuccess(captchaUrl)) //Диспатчим изменения стэйта\r\n}\r\n\r\n\r\n\r\nexport default authReducer;\r\n//Типы\r\nexport type InitialStateType= typeof initialState; // Задание неявной типизации\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>","C:\\SPA_socialNetwork\\my-app\\src\\redux\\dialogs-reducer.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\redux\\sidebar-reducer.ts",["511"]," let initialState= {};\r\n type InitialStateType=typeof initialState\r\n const sidebarReducer= (state=initialState,action:any) => {\r\n\r\n    return state;\r\n}\r\n\r\n\r\nexport default sidebarReducer;","C:\\SPA_socialNetwork\\my-app\\src\\redux\\profile-reducer.ts",["512","513","514","515","516","517"],"import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { profileAPI } from \"../api/profile-api\";\r\nimport { usersAPI } from \"../api/users-api\";\r\n\r\nimport { PhotosType, PostType, ProfileType } from \"../Types/types\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS='SAVE_PHOTO_SUCCESS'; // 6. Создаем ЭКШЕН \r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, post: 'Hello, I try to be better', likesCount: 12 },\r\n        { id: 2, post: 'Hello, its my second post', likesCount: 69 },\r\n        { id: 3, post: 'ZZzzzZZZZ', likesCount: 241 },\r\n        { id: 4, post: 'Yo!Yo!YO!', likesCount: 245 },\r\n        { id: 5, post: 'HEYYYY MAN', likesCount: 364 }] as Array<PostType>,\r\n    // newPostText: ' ', //Упразднено, редакс формы\r\n    profile: null as ProfileType | null,\r\n    status: ' ',\r\n    // newPostText:''\r\n};\r\n\r\nexport type InitialStateType=typeof initialState\r\n\r\nexport const profileReducer = (state = initialState, action:ActionsType):InitialStateType=> {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 6,\r\n                // post: state.newPostText,\r\n                post: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                // newPostText: ''\r\n            };\r\n            // stateCopy.posts=[...state.posts];\r\n            // stateCopy.posts.push(newPost);\r\n            // stateCopy.newPostText = '';\r\n            // return stateCopy;\r\n        }\r\n        // // case UPDATE_NEW_POST_TEXT: {\r\n        // //     return {\r\n        // //         ...state,\r\n        // //         newPostText: action.newText\r\n        // //     }; -упразднено редакс формы\r\n        //     // stateCopy.newPostText = action.newText;\r\n        //     // return stateCopy;\r\n        // }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        };\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        };\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postID)\r\n            }\r\n        };\r\n        case SAVE_PHOTO_SUCCESS: {   //7. Тип экшена обрабатываем в редьюсере/ 8.Идем в АПИшку и добавляем запрос на сервер\r\n            return {\r\n                ...state,\r\n                profile:{...state.profile, photos:action.photos} as ProfileType\r\n                }\r\n        };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions={\r\n    addPostActionCreator: (newPostText:string) => ({ type: ADD_POST, newPostText }as const),\r\n    setUserProfile: (profile:ProfileType) => ({ type: SET_USER_PROFILE, profile }as const),\r\n    setStatus :(status:string)=> ({ type: SET_STATUS, status }as const),\r\n    deletePost: (postID:number) => ({ type: DELETE_POST, postID }as const),\r\n    savePhotoSuccess: (photos:PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, photos }as const) // 5. Создаем ЭКШЕН КРИЭЙТОР (savePhotoSuccess),обновляем массив photos\r\n}\r\n\r\n\r\n// export const updateNewPostTextActionCreator = (text) => ({ type: UPDATE_NEW_POST_TEXT, newText: text })\r\n\r\n\r\n\r\n\r\nexport const getUserProfile = (userID:number):ThunkType => async (dispatch) => {  //Thunk creator -создаем санку\r\n    const data = await usersAPI.getProfile(userID)\r\n    //    .then(response => {\r\n    dispatch(actions.setUserProfile(data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n\r\n}\r\n\r\nexport const getStatus = (userID:number):ThunkType => async (dispatch) => {  //Thunk creator -создаем санку\r\n    let data = await profileAPI.getStatus(userID);\r\n    // .then(response => {\r\n    dispatch(actions.setStatus(data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    // });\r\n}\r\n\r\nexport const updateStatus = (status:string):ThunkType => async (dispatch) => {  //Thunk creator -создаем санку\r\n    try {\r\n    let data = await profileAPI.updateStatus(status)\r\n    // .then(response => {\r\n    if (data.resultCode === 0) { //Если в ответе на запрос пришел резалтКод=0, то ошибки нет,статус сменился, сетаем статус\r\n        dispatch(actions.setStatus(status)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    }\r\n    // });\r\n}\r\ncatch (error) {              //Конструкцию асинхронного запроса оборачивают в трай кэтч,трай-все хорошо пробуем-получилось, кэтч-ловим ошибку\r\n\r\n}\r\n}\r\n\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch) => {  //4 Thunk creator -создаем санку для передачи фото\r\n    let data = await profileAPI.savePhoto(file)\r\n    // .then(response => {\r\n    if (data.resultCode === 0) { //Если в ответе на запрос пришел резалтКод=0, то ошибки нет,статус сменился, сетаем статус\r\n        dispatch(actions.savePhotoSuccess(data.data.photos)); //Если ответ с сервера положительный, фото сохранено на сервере мы диспатчим экшен и меняем фото в UI в браузере\r\n    }                                    // 5. Создаем ЭКШЕН КРИЭЙТОР (savePhotoSuccess)\r\n    //response.data.photos-на сервере лежат фото по такому адресу\r\n    // });\r\n}\r\n\r\n// saveProfile-3)ДОБАВЛЯЕМ САНКУ, ДИСПАТЧИ ДЛЯ РЕДЬЮСЕРА/4) В API добавляем запрос\r\nexport const saveProfile = (profile:ProfileType):ThunkType => async (dispatch,getState:any) => {\r\n    const userId=getState().auth.userId //Вытаскиваем пользовательский ID из другого редьюсера, обращением к СТОРУ\r\n    const data = await profileAPI.saveProfile(profile)\r\n    // .then(response => {\r\n        // debugger;\r\n    if (data.resultCode === 0) { //Если в ответе на запрос пришел резалтКод=0, то ошибки нет,статус сменился, сетаем статус\r\n        dispatch(getUserProfile(userId)); //Если ответ с сервера положительный, заново диспатчим санку обнови пользователя и передаем айдишник залогин.пользователя\r\n    }  \r\n    else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0]}));\r\n        // Если ошибка есть в запросе на сервер, ловим ошибку и стоп субмитим из формы\r\n        return Promise.reject(data.messages[0]);\r\n        // В промис возвращаем ошибку,если у нас она появилась в результате запроса на сервер\r\n    }                                \r\n}\r\n\r\n\r\nexport default profileReducer;\r\n\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>","C:\\SPA_socialNetwork\\my-app\\src\\redux\\user-reducer.ts",["518","519","520"],"\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { UserType } from './../Types/types';\r\nimport { updateObjectInArray } from \"../components/utilites/object-helpers\";\r\nimport { PhotosType } from \"../Types/types\";\r\nimport { Dispatch } from 'react';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { usersAPI } from '../api/users-api';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOOGLE_IS_FETCHING = 'TOOGLE_IS_FETCHING';\r\nconst TOOGLE_IS_FOLLOWING_PROGRESS = 'TOOGLE_IS_FOLLOWING_PROGRESS';\r\nconst SET_FILTER = 'SET_FILTER';\r\n\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({ type: FOLLOW, userId } as const),       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\n\r\n    unfollowSuccess: (userId: number) => ({ type: UNFOLLOW, userId } as const),   // 5) Создаем копию STATE,чтоб не копировать целиком объект (это не правильно, имьютабельность нарушится)\r\n\r\n    setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users } as const),        // 7) Берем юзеров списком из сервака, установим их в State\r\n\r\n    setCurrentPage: (page: number) => ({ type: SET_CURRENT_PAGE, currentPage: page } as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOOGLE_IS_FETCHING, isFetching } as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const),\r\n\r\n    setFilter: (filter:FilterType) => ({ type: SET_FILTER, payload:filter} as const)\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,   //В UsersContainer в State передаем\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //Массив пользователей ID-ишки\r\n    filter:{\r\n        term:\" \",\r\n        friend: null as null | boolean\r\n    }\r\n};\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): InitialState => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: true })\r\n\r\n                           }\r\n\r\n        case UNFOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: false })\r\n               \r\n            }\r\n\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }  // 8) Берем пользователей из Action и подсовываем в state, перезатираем пользователей\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }  // 15) Отображение стр.пагинации пользователей\r\n\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }  // 16) Отображение пользователей\r\n\r\n        }\r\n\r\n        case TOOGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }  // 17) Отображение preloader\r\n\r\n        }\r\n        case TOOGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n\r\n                //Фильтруем массив пропускаем только ту ID которая не равна той ID которая пришла в action    \r\n                // Если у нас isFetching=true то в массив добавляем новую ID-шку                   \r\n            }      // Если у нас isFetching=false то создвем новый массив  \r\n\r\n\r\n        }\r\n        case SET_FILTER: {\r\n            return { ...state, filter: action.payload }  \r\n\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\n// export const followSuccess = (userId: number) => ({ type: FOLLOW, userId })       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\n\r\n// export const unfollowSuccess = (userId: number) => ({ type: UNFOLLOW, userId })   // 5) Создаем копию STATE,чтоб не копировать целиком объект (это не правильно, имьютабельность нарушится)\r\n\r\n// export const setUsers = (users: Array<UserType>) => ({ type: SET_USERS, users })        // 7) Берем юзеров списком из сервака, установим их в State\r\n\r\n// export const setCurrentPage = (page: number) => ({ type: SET_CURRENT_PAGE, currentPage: page })\r\n\r\n// export const setTotalUsersCount = (totalUsersCount: number) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\n// export const toggleIsFetching = (isFetching: boolean) => ({ type: TOOGLE_IS_FETCHING, isFetching })\r\n\r\n// export const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({ type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const requestUsers = (page: number,\r\n    pageSize: number, filter: FilterType): ThunkType => {  //Типизация Санки имеет 4 параметра- то что возвращает санка- промисы,типы стэйта, экстра аргументы-unkown и типы экшенов. ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n    return async (dispatch: DispatchType, getState: GetStateType) => {\r\n        dispatch(actions.toggleIsFetching(true));  //Я бизнес уровень,я активирую крутилку (загрузка, ожидание)\r\n        dispatch(actions.setCurrentPage(page)); //Диспатчим текущую страницу\r\n        dispatch(actions.setFilter(filter)); //term передаем строку поиска друзей (пользователей) формик\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        // .then(data => {\r\n\r\n        dispatch(actions.toggleIsFetching(false));  //Я бизнес уровень,ответ с сервера пришел, крутилку выключаем\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n        // });\r\n\r\n    }\r\n\r\n}\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n    userId: number, apiMethod: any,\r\n    actionCreator: (userId: number) => ActionsType) => { //Рефакторинг.Общий метод.Универсальная функция для follow unfollow\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n//Создаем вторую санку, для follow\r\nexport const follow = (userId: number): ThunkType => {\r\n    \r\n    return async (dispatch: any) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n       \r\n    }\r\n\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default usersReducer;","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\Paginator\\Paginator.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\redux\\redux-store.ts",["521"],"import {Action, applyMiddleware, combineReducers,compose,createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport slidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './user-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";   //Мы подключаем санковый мидлвээр, базовый, который установился по дефолту\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\nlet rootReducer= combineReducers ({\r\nprofilePage:profileReducer,\r\ndialogsPage:dialogsReducer,\r\nsidebar:slidebarReducer,\r\nusersPage: usersReducer,   //Reducer зарегистрировали, в State будет UsersPage теперь\r\nauth:authReducer,\r\napp:appReducer,\r\nform:formReducer\r\n});\r\n// Добавляем строки для работы с расширением стор от хром\r\n\r\ntype RootReducerType= typeof rootReducer //(globalstate:GLOBALSTATE)=>GLOBALSTATE\r\nexport type AppStateType=ReturnType<RootReducerType> //ReturnType-функция возвращает типы данных,которые приходят со всех редьюсеров и формируют глобальный стэйт\r\nlet state:AppStateType\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware))); // Создание нового стора с расширением для хрома\r\n\r\n// type PropertiesTypes<T> = T extends {[key:string]:infer U} ? U :never\r\n// export type InferActionsTypes<T extends {[key:string]: (...args:any[])=>any}>=ReturnType<PropertiesTypes<T>>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args:any[])=>infer U} ? U:never //Две верхние строки заменили одной приводим экшен типы к типизации, верни нам функцию и определи ее тип сам\r\n\r\nexport type BaseThunkType<A extends Action, R=Promise<void>> = ThunkAction<R, AppStateType, unknown, A>//общий тип для санок\r\n\r\n\r\n// let store=createStore(reducers, applyMiddleware(thunkMiddleware.withExtraArgument('string'))); создание старого стора без расширения для хрома\r\n//@ts-ignore\r\nwindow.__store__=store;  //Игнорируем строку typescript\r\n\r\nexport default store;","C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\UsersContainer.tsx",["522","523","524","525","526","527","528","529","530","531","532","533","534","535"],"import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { follow, unfollow,  requestUsers, FilterType } from '../../redux/user-reducer';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { compose } from 'redux';\r\nimport {getPageSize,getTotalUsersCount,getCurrentPage,getIsFetching,getFollowingInProgress, getUsers, getUsersFilter} from '../../redux/users-selectors';\r\nimport { UserType } from '../../Types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { Users } from './Users';\r\n\r\ntype UsersPagePropsType= {\r\n  pageTitle:string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props)=> {\r\n  const isFetching=useSelector(getIsFetching)\r\n  return <>\r\n  <h2>{props.pageTitle}</h2>\r\n  {isFetching ? \r\n  <Preloader/>: null}\r\n  <Users/>\r\n  </>\r\n\r\n}\r\n","C:\\SPA_socialNetwork\\my-app\\src\\redux\\users-selectors.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\Users.tsx",["536","537","538"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FilterType, requestUsers, follow, unfollow, } from '../../redux/user-reducer';\r\nimport { getCurrentPage, getPageSize, getTotalUsersCount, getUsersFilter, getUsers, getFollowingInProgress } from '../../redux/users-selectors';\r\nimport { UserType } from '../../Types/types';\r\nimport Paginator from '../Common/Paginator/Paginator';\r\nimport User from './User';\r\nimport { UsersSearchForm } from './UsersSearchForm';\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {\r\n  portionSize?: number //Либо число number 10 либо undefined, на верх по иерархии не передаем это число\r\n}\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n  const users = useSelector(getUsers)\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const pageSize = useSelector(getPageSize)\r\n  const filter = useSelector(getUsersFilter)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n  const dispatch = useDispatch();\r\n  const history = useHistory(); //Для работы с УРЛОМ брраузера, дай мне нужный урл для замены, благодаря узХистори запушем сёрч строку\r\n\r\n  \r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType // чтоб без ? знака было парсим так через substr(1))\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n    if (!!parsed.page) actualPage = Number(parsed.page) //Если у нас есть какая то страница вначале, то добавь еев текущую страницу (при перезагрузке)\r\n    if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null }\r\n        break\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true }\r\n        break\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false }\r\n        break\r\n    }\r\n    // if(!!parsed.friend) actualFilter={...actualFilter, friend:parsed.friend ==='null' ? null : parsed.friend==='true' ? true : false}\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, [])\r\nuseEffect(() => {\r\n  const query: QueryParamsType = {}\r\n\r\n  if (!!filter.term) query.term = filter.term\r\n  if (filter.friend !== null) query.friend = String(filter.friend)\r\n  if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n    history.push({\r\n      pathname: '/developers',\r\n      // search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n      search:queryString.stringify(query)\r\n    })\r\n  }, [filter, currentPage]) //Синхронизация URL адреса, как только будет приходить какой то новый фильтр (депенденсес зависимость [])\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  }\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter));\r\n  }\r\n\r\n  const followW = (userId: number) => {\r\n    dispatch(follow(userId));\r\n\r\n\r\n  }\r\n  const unfollowW = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  }\r\n\r\n\r\n  return <div>\r\n    <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n    <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n      pageSize={pageSize} totalItemsCount={totalUsersCount} />\r\n    <div>\r\n      {\r\n        users.map(u => <User user={u}\r\n          followingInProgress={followingInProgress}\r\n          unfollow={unfollowW}\r\n          follow={followW}\r\n          key={u.id}\r\n        />)\r\n      }\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\n","C:\\SPA_socialNetwork\\my-app\\src\\api\\api.ts",["539"],"import { UserType } from './../Types/types';\r\n// import * as axios from 'axios';\r\nimport axios from 'axios';\r\nimport { ProfileType } from '../Types/types';\r\n\r\nexport const instance=axios.create({\r\n    withCredentials:true, //Означает только зарегистрированному пользователю разрешить\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"6bbbf898-afb4-44c4-874f-ee6620e5c06f\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Success=0,\r\n  Error=1,\r\n    }\r\n  export enum ResultCodesEnumForCaptcha {\r\n    CaptchaIsRequired=10\r\n    }\r\n\r\nexport type GetItemsType={\r\n  items: Array<UserType>\r\n  totalCount:number\r\n  error:string | null\r\n}\r\nexport type APIResponseType<D={},RC=ResultCodesEnum>={  //Создаем Generic-тип для уточнения типов\r\n  data:D\r\n  messages: Array<string>\r\n  resultCode:RC\r\n  }","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",["540"],"import React, { ChangeEvent } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\ntype PropsType={\r\n  status:string\r\n  updateStatus:(newStatus:string)=>void\r\n}\r\ntype StateType={\r\n  editMode:boolean\r\n  status:string\r\n}\r\n\r\nclass ProfileStatus extends React.Component<PropsType, StateType> {\r\n  \r\n\r\n  state = {\r\n    editMode: false,\r\n    status:this.props.status\r\n      }\r\n\r\nactivateEditMode (){\r\n  this.setState({\r\n    editMode:true,\r\n  })\r\n\r\n}\r\ndeactivateEditMode (){\r\n  this.setState({\r\n    editMode:false,\r\n    \r\n  });\r\n  this.props.updateStatus(this.state.status);\r\n  }\r\n  onStatusChange=(e:ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      status:e.currentTarget.value\r\n    }); \r\n    \r\n  }\r\n\r\ncomponentDidUpdate (prevProps:PropsType, prevState:StateType) {\r\n  if(prevProps.status !==this.props.status) {\r\n    this.setState({\r\n      status:this.props.status\r\n    });\r\n  }\r\n\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode &&\r\n          <div>\r\n            <span onDoubleClick={ this.activateEditMode.bind(this) }> {this.props.status || \"-----\"}</span>\r\n          </div>\r\n        }\r\n        {this.state.editMode &&\r\n          <div>\r\n            <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.state.status} />\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ProfileStatus;\r\n",["541","542"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Login\\Login.tsx",["543","544"],"import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Input } from '../Common/FormControl/FormsControls';\r\nimport { required } from '../validators/validators';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from \"./../Common/FormControl/FormsControls.module.css\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype LoginFormOwnProps={\r\n    captchaUrl:string | null\r\n}\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<LoginFormValuesType,LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input}\r\n                    validate={[required]} />\r\n            </div>\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\",\"password\",[required],Input,{type:\"password\"})}\r\n            {/* <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"} component={Input}\r\n                    validate={[required]} />\r\n            </div> */}\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input} /> remember me\r\n           </div>\r\n           {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n           {props.captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\",\"captcha\",[required],Input,{})}\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ //a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\nexport type LoginFormValuesType={\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha:string\r\n}\r\ntype LoginFormValuesTypeKeys=Extract<keyof LoginFormValuesType, string>\r\n\r\nexport const Login:React.FC = () => {\r\n    const captchaUrl=useSelector((state:AppStateType)=>state.auth.captchaUrl)\r\n    const isAuth=useSelector((state:AppStateType)=>state.auth.isAuth)\r\n    const dispatch=useDispatch();\r\n\r\n    const onSubmit = (formData:LoginFormValuesType) => {\r\n       dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n}\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\validators\\validators.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\FormControl\\FormsControls.tsx",["545","546"],"import { FieldValidatorType,required } from '../../validators/validators';\r\nimport React from 'react';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\nimport { LoginFormValuesType } from '../../Login/Login';\r\n\r\ntype FormControlPropsType={\r\n    meta:WrappedFieldMetaProps \r\n   }\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta:{touched,error}, children }) => {\r\n    const hasError=touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const TextArea:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps}=props;\r\n    // const {input, meta,child ...restProps}=props; \r\n        return <FormControl {...props}> <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\nexport const Input:React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, meta,  ...restProps}=props;\r\n     // const {input, meta,child ...restProps}=props; \r\n    return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\nexport function createField<FormsKeysType extends string> (placeholder:string | undefined,name:FormsKeysType,\r\n    validators:Array<FieldValidatorType>,\r\n    component:React.FC<WrappedFieldProps>,\r\n    props={},text=\"\") {  //Круглуые скобки, означает что возвращает нам что то функция,можно ставить фигурные скобки но тогда использовать return\r\n    return <div>\r\n    <Field placeholder={placeholder} name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props} /> {text}\r\n\r\n    </div>\r\n} \r\nexport type GetStringKeys<T> = Extract<keyof T, string>","C:\\SPA_socialNetwork\\my-app\\src\\api\\profile-api.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\api\\users-api.ts",["547"],"import { AxiosPromise } from \"axios\";\r\nimport { GetItemsType, instance } from \"./api\";\r\nimport { profileAPI } from \"./profile-api\";\r\n\r\n\r\nexport const usersAPI= {\r\n    getUsers (currentPage=1, pageSize=10, term:string='', friend:null | boolean=null){ //Группируем методы в созданном объекте userAPI\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (friend===null ? '': `&friend=${friend}`))\r\n            .then (response=>{\r\n             return  response.data;\r\n           });  //Промисы, получаем в ответе только те данные от сервера,что нам нужны\r\n     },\r\n     follow (userID:number) {\r\n        return instance.post<ResponseType>(`follow/${userID}`).then(res=>res.data)\r\n     },\r\n\r\n     \r\n\r\n     unfollow (userID:number) {\r\n       return instance.delete(`follow/${userID}`).then(res=>res.data) as Promise<ResponseType>\r\n     },\r\n     getProfile (userID:number) {\r\n        console.warn('Obsolete method. Please profileAPI object')\r\n        return profileAPI.getProfile(userID);\r\n               },\r\n     \r\n}","C:\\SPA_socialNetwork\\my-app\\src\\api\\auth-api.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\api\\security-api.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\utilites\\object-helpers.ts",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\Dialogs.tsx",["548","549"],"import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\nimport { createField, TextArea } from '../Common/FormControl/FormsControls';\r\nimport { maxLengthCreator, required } from '../validators/validators';\r\nimport s from './/.//Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\nexport type NewMessageFormValuesType={\r\n  newMessageBody:string\r\n}\r\n\r\ntype NewMessageFormValuesTypeKeys=Extract<keyof NewMessageFormValuesType, string>\r\n\r\ntype OwnPropsType={\r\n  dialogsPage:InitialStateType\r\n  sendMessage:(messageText:string)=>void\r\n}\r\nconst Dialogs:React.FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n \r\n  let addNewMessage = (values:NewMessageFormValuesType) => {\r\n    alert(values.newMessageBody);\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n              </div>\r\n\r\n      <div className={s.messages}>\r\n             <div>{messagesElements}</div>\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\ntype PropsType={}\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormValuesType,PropsType> & PropsType>=(props)=> {\r\nreturn (\r\n<form onSubmit={props.handleSubmit}>\r\n          <div>\r\n          {createField<NewMessageFormValuesTypeKeys>(\"Напишите сообщение\",\"newMessageBody\",[required,maxLength50],TextArea)}\r\n           </div> \r\n                    <div><button>Отправить</button></div>\r\n        </form>\r\n)\r\n}\r\nconst AddMessageFormRedux=reduxForm<NewMessageFormValuesType>({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n\r\nexport default Dialogs;","C:\\SPA_socialNetwork\\my-app\\src\\App.tsx",["550","551","552","553"],"import React, { Component, Suspense } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, BrowserRouter, withRouter, Switch, Redirect, Link } from 'react-router-dom';\nimport Music from './components/Music/Music';\nimport Video from './components/Video/Video';\nimport Security from './components/Security/Security';\nimport News from './components/News/News';\nimport Settings from './components/Settings/Settings';\nimport About_us from './components/About_us/About_us';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport {UsersPage} from './components/Users/UsersContainer';\nimport {Login} from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {initializeApp} from './redux/app-reducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { withSuspence } from './components/hok/withSuspence';\nimport { AppStateType } from './redux/redux-store';\nimport 'antd/dist/antd.css';\nimport { Button } from 'antd';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport { Header } from './components/Header/Header';\n\ntype MapPropsType=ReturnType <typeof mapStateToProps> \ntype DispatchPropsType={initializeApp: ()=>void}\n\n\n\nconst { SubMenu } = Menu;\nconst {Content, Footer, Sider } = Layout;\n\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Импорт компоненты с помощью lazy компонент\nconst SuspendedDialogs=withSuspence(DialogsContainer);\n// import ProfileContainer from './components/Profile/ProfileContainer';\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer')); // Импорт компоненты с помощью lazy компонент\n\nclass App extends Component <MapPropsType & DispatchPropsType> {\n  catchAllUnhandleError=(e:PromiseRejectionEvent)=>{\n  //  alert('Some error occured');\n  }\n  componentDidMount () {\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\",this.catchAllUnhandleError);// Функция глобальная для отлова ошибок rejection в промисах\n        }\n    componentWillUnmount () {\n      window.addEventListener(\"unhandledrejection\",this.catchAllUnhandleError);// Демонтируем функцию обращения к глобальному объекту,подчищаем за собой мусор,когда компонента умрет, должен умереть и мусор\n    }    \n  render() {\n    // // Если не проиницилизировались, верни нам прелоадер -загрузки экран\n    // if (!this.props.initialized) { \n    // return <Preloader/>\n    // }\n     return (\n       \n            //  <div className= 'app-wrapper'>\n        // <HeaderContainer />\n        // <Navbar />\n        \n        // <div className='app-wrapper-content'>\n        //   <Switch>\n        //   <Route exact path='/' render={()=><Redirect to={\"/profile\"}/>}/>\n        //   <Route exact path='/SPA_socialNetwork' render={()=><Redirect to={\"/profile\"}/>}/>        \n        //   <Route path='/dialogs' \n        //   render={()=> <SuspendedDialogs/>}/>\n          \n        //   <Route path='/profile/:userID?'render={()=> {\n        //         return <Suspense fallback={<div>Loading...</div>}> \n        //         {/* Пока компонента загружается,видим Loading */}\n        //   <ProfileContainer  />\n        //   </Suspense>\n        //   }}/>     \n        //   {/* :UserId-Добавляем путь к пользователю в ссылку. ?-означает,что параметр может отсутствовать */}\n        //   <Route path='/login'render={()=><Login  />}/>    \n        //   <Route path='/users'render={()=><UsersPage pageTitle={'Страница пользователей'}/>}/>\n        //   <Route path='/music' component={Music}/>\n        //   <Route path='/video' component={Video}/>\n        //   <Route path='/news' component={News}/>\n        //   <Route path='/settings' component={Settings}/>\n        //   <Route path='/security' component={Security}/>\n        //   <Route path='/about_us' component={About_us}/>\n        //   <Route path='*' render={()=><div>404 Not Found Page,Sorry;) <Button>Ok</Button></div>}/>\n        //   </Switch>\n        // </div>\n                      \n        // </div>  \n        <Layout>\n        <Header/>\n        <Content style={{padding: '0 50px'}}>\n            <Breadcrumb style={{margin: '16px 0'}}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>List</Breadcrumb.Item>\n                <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                <Sider className=\"site-layout-background\" width={200}>\n                    <Menu\n                        mode=\"inline\"\n                        /*  defaultSelectedKeys={['7']}*/\n                        /*  defaultOpenKeys={['sub1']}*/\n                        style={{height: '100%'}}\n                    >\n                        <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\n                            <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\n                            <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\n                            <Menu.Item key=\"3\">option3</Menu.Item>\n                            <Menu.Item key=\"4\">option4</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\n                            <Menu.Item key=\"5\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n                            <Menu.Item key=\"6\">option6</Menu.Item>\n                            <Menu.Item key=\"7\">option7</Menu.Item>\n                            <Menu.Item key=\"8\">option8</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\n                            <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\n                            <Menu.Item key=\"10\">option10</Menu.Item>\n                            <Menu.Item key=\"11\">option11</Menu.Item>\n                            <Menu.Item key=\"12\">option12</Menu.Item>\n                        </SubMenu>\n                    </Menu>\n                </Sider>\n                <Content style={{padding: '0 24px', minHeight: 280}}>\n                   <Switch>\n          <Route exact path='/' render={()=><Redirect to={\"/profile\"}/>}/>\n          <Route exact path='/SPA_socialNetwork' render={()=><Redirect to={\"/profile\"}/>}/>        \n           <Route path='/dialogs' \n          render={()=> <SuspendedDialogs/>}/>\n          \n          <Route path='/profile/:userID?'render={()=> {\n                return <Suspense fallback={<div>Loading...</div>}> \n                {/* Пока компонента загружается,видим Loading */}\n          <ProfileContainer  />\n          </Suspense>\n          }}/>     \n          {/* :UserId-Добавляем путь к пользователю в ссылку. ?-означает,что параметр может отсутствовать */}\n          <Route path='/login'render={()=><Login  />}/>    \n          <Route path='/developers'render={()=><UsersPage pageTitle={'Страница пользователей'}/>}/>\n          <Route path='/music' component={Music}/>\n          <Route path='/video' component={Video}/>\n          <Route path='/news' component={News}/>\n          <Route path='/settings' component={Settings}/>\n          <Route path='/security' component={Security}/>\n          <Route path='/about_us' component={About_us}/>\n          <Route path='*' render={()=><div>404 Not Found Page,Sorry;) <Button>Ok</Button></div>}/>\n          </Switch>\n                  \n                      \n                </Content>\n            </Layout>\n        </Content>\n        <Footer style={{textAlign: 'center'}}>Social Network ©2021 Created by JohnyWayne</Footer>\n    </Layout>\n         );\n  }\n}\nconst mapStateToProps=(state:AppStateType)=> ({\n  initialized:state.app.initialized //Обращение к BLL проинициализированы мы или нет, добавили в список редьюсеров используемый, закомбайнили редьюсер app\n})\n\nexport default compose<React.ComponentType> (\n  withRouter,\n  connect (mapStateToProps, {initializeApp})) (App);\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\hok\\withSuspence.tsx",["554","555","556"],"import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nexport function withSuspence <WCP>(WrappedComponent:React.ComponentType<WCP>) {\r\n\r\n  return (props:WCP)=> {\r\n  return  <React.Suspense fallback={<div>Loading...</div>}> \r\n  <WrappedComponent {...props}/>\r\n  </React.Suspense>\r\n  }\r\n} ","C:\\SPA_socialNetwork\\my-app\\src\\components\\hok\\withAuthRedirect.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileContainer.tsx",["557","558"],"import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto,saveProfile} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../Types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapPropsType=ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType= {\r\n  getUserProfile:(userID:number)=>void\r\n  getStatus:(userID:number)=>void\r\n  updateStatus:(status:string)=>void\r\n  savePhoto:(file:File)=>void\r\n  saveProfile:(profile:ProfileType)=>Promise<any>\r\n}\r\n\r\ntype PathParamType={\r\n  userID:string\r\n}\r\ntype PropsType=MapPropsType & DispatchPropsType & RouteComponentProps<PathParamType>\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\nrefreshProfile () {\r\n  let userID: number | null = +this.props.match.params.userID;\r\n  if (!userID) {\r\n    userID=this.props.authorizedUserID;\r\n    if(!userID) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n  }\r\n  this.props.getUserProfile(userID as number);\r\n  this.props.getStatus(userID as number);\r\n}\r\n\r\n componentDidMount () {\r\n  this.refreshProfile ();\r\n}\r\ncomponentDidUpdate(prevProps:PropsType,prevState:PropsType) {\r\n  if (this.props.match.params.userID !=prevProps.match.params.userID ) { //Сравнение мы будем обновлять компоненту только когда текущие рпопсы номер пользователя отличаются от предыдущих (тогда есть изменение надо переррисовать)\r\n  this.refreshProfile ();  //Иначе цикл будет бесконечным ComponentDidMount перерисует потом дтдапдеэйт и цикл будет вечным\r\n}\r\n}\r\n\r\n\r\n\r\n render () {\r\n   \r\n\r\n    return (\r\n      <Profile {...this.props}\r\n      IsOwner={! this.props.match.params.userID} //Я владелец страницы?Двойное отрицание псевдоложь, если я владелец этой страницы id-нет, то мне будет показана аватарка загрузка профиля\r\n      profile={this.props.profile} \r\n      status={this.props.status}\r\n      savePhoto= {this.props.savePhoto} //2 этап. прокинули функцию добавления фото с UI уровня с  ProfileInfo\r\n      updateStatus={this.props.updateStatus}/>\r\n                 \r\n    )     \r\n    \r\n}\r\n}\r\nlet mapStateToProps =(state:AppStateType) => ({\r\n  profile:state.profilePage.profile,\r\n  status:state.profilePage.status,\r\n  authorizedUserID: state.auth.userId, //state-BLL уровень, auth-ветка там, где мы комбайним редьюсеры, userId-ID пользователя\r\n  isAuth:state.auth.isAuth\r\n });\r\nexport default compose <React.ComponentType> (\r\n     connect(mapStateToProps,{getUserProfile, getStatus, updateStatus,savePhoto,saveProfile}),  //3 Добавили санку санк криэйтор чтоб в пропсах пришло добавление фото, идем в профайл редьюсер\r\n     withRouter,\r\n    //withAuthRedirect\r\n    )(ProfileContainer);\r\n      \r\n// let AuthRedirectComponent= withAuthRedirect(ProfileContainer);\r\n\r\n// let WithURLDataContainerComponent= withRouter(AuthRedirectComponent);\r\n// export default connect(mapStateToProps,{getUserProfile}) (WithURLDataContainerComponent);\r\n//saveProfile -добавляем в мап диспатч ту пропсу для прокидывания пропса сохранения профиля в бизнес уровень\r\n// saveProfile добавляем санк креэйтор в профайл редьюсер","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\Profile.tsx",["559","560","561"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\User.tsx",["562"],"import React from 'react';\r\nimport userPhoto from '../../assets/images/User.png';\r\nimport styles from './users.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../Types/types';\r\n\r\ntype PropsType={\r\n    user:UserType\r\n    followingInProgress:Array<Number>\r\n    unfollow:(userId:number)=>void //Функция принимает,но ничего не возвращает\r\n    follow:(userId:number)=>void\r\n}\r\n\r\nlet User:React.FC<PropsType> = ({user,followingInProgress,unfollow,follow}) => {\r\n       return (\r\n       <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed \r\n                            ? <button disabled={followingInProgress\r\n                                .some( id=>id===user.id)} \r\n                                onClick={() => {unfollow(user.id)}}> \r\n                                Unfollow</button>       // /* // В пропсах обращаемся к follow props.follow(u.id), так как в UserContainer в mapDispatchToProps у нас есть такая функция, принимает пользовательский id - */                                 \r\n                        : <button disabled={followingInProgress.some(id=>id===user.id)} \r\n                            onClick={() => {follow(user.id) }}>  \r\n                            {/* //Если хотябы кто кто нибудь из этого массива some равен (true) id пользователя то метод some вернет true */}\r\n                                                                  \r\n                            Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n\r\n            </div>)\r\n        }\r\n\r\nexport default User;","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["563","564"],"import React, { ChangeEvent, useState } from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.';\r\nimport userPhoto from '../../../assets/images/User12.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ProfileType,ContactsType } from '../../../Types/types';\r\n\r\ntype PropsType={\r\n  profile:ProfileType | null\r\n  status:string\r\n  IsOwner:boolean\r\n  updateStatus:(status:string)=>void\r\n  savePhoto: (file: File) => void\r\n  saveProfile:(profile:ProfileType)=>Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<PropsType> = ({ profile, status, IsOwner, updateStatus, savePhoto,saveProfile }) => {\r\n  let [editMode,setEditMode]=useState(false); //Деструктуризация массива (локальный стэйт,изменятся ли статус?)\r\n  \r\n  \r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) { // 1 Передаем параметр события e, забираем из инпута файл картинку открытую\r\n      savePhoto(e.target.files[0])                      //Вызываю колбэк и передаю во внешний мир то,что мы вызвали\r\n      // props.savePhoto(e.target.files[0] -props убрали тк провели деструктуризацию\r\n    }\r\n  }\r\nconst onSubmit=async(formData:ProfileType)=> { //Промис, сохранить результат и переключение с кнопки Save на Edit происходит, когда дождались результата успешного (промис сработал)\r\n  saveProfile(formData).then(()=>{ //ВЫЗЫВАЕМ КОЛЛБЭК,КОТОРЫЙ ДИСПАТЧИТ-В saveProfile из ProfileDataForm придут стэйты и объект с данными о профиле для передачи из UI в BLL\r\n    setEditMode(false); //Вышли из режима редактирования по нажатию кнопки Save в форме\r\n  })\r\n   \r\n}\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        {/* Псевдо ложь псевдоистина псевдо классы,если фото нет мы показываем фото из папки */}\r\n        {IsOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n        {/* onChange-Вешаем обработчик события,когда фотку загрузили,надо ее подгрузить */}\r\n        {/* INFORMATION+AVA+DESCRIPTION */}\r\n        {editMode \r\n        ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>  \r\n        //Передаем инициализац.значения в профайлформу чтоб с нуля не пустые поля отображались а со стартовыми значенияим <ProfileDataForm initialValues={profile} \r\n        :<ProfileData gotoEditMode={()=>{setEditMode(true)}} profile={profile} IsOwner={IsOwner}/>} \r\n        {/* Если editMode режим редактирования то показываем форму для заполнения,если нет редактирования то показываем форму  */}\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n          </div>\r\n    </div>\r\n  )\r\n\r\n}\r\ntype ProfileDataPropsType={\r\n  profile:ProfileType\r\n  IsOwner:boolean\r\n  gotoEditMode:()=>void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType>=({profile,IsOwner,gotoEditMode}) => {\r\n  return  <div>\r\n   {IsOwner && <div><button onClick={gotoEditMode}>edit</button></div>} \r\n   {/* В режиме редактирования кнопка редактирования поялвяется,если мы залогинены мы авторизованы */}\r\n  <div>\r\n    <b> Full name </b>: {profile.fullName}\r\n  </div>\r\n  <div>\r\n    <b> Looking for a job </b>{profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n  </div>\r\n  {profile.lookingForAJob &&   //Если работу ищем,тру,тогда отобразим дивку с описанием\r\n    <div>\r\n      <b>My Professional Skills</b>: {profile.lookingForAJobDescription}\r\n    </div>\r\n  }\r\n  <div>\r\n    <b> About me </b>{profile.aboutMe}\r\n  </div>\r\n  <div>\r\n    <b> Contacts </b>:{Object.keys(profile.contacts).map(key => { //Пробегаем по массиву map и на базе каждого элемента рисуем компоненту Contact\r\n      return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n    }\r\n    )}\r\n  </div>\r\n  </div>\r\n}\r\ntype ContactsPropsType={\r\n  contactTitle:string\r\n  contactValue:string\r\n}\r\n\r\n\r\nconst Contact:React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return <div className={s.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\nexport default ProfileInfo;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["565","566","567","568","569","570","571"],"import React, { Component, PureComponent } from 'react';\r\nimport s from '..//MyPosts/MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../validators/validators';\r\nimport { TextArea } from '../../Common/FormControl/FormsControls';\r\nimport { PostType } from '../../../Types/types';\r\nimport AddPostForm from '../../Common/FormControl/AddPostForm';\r\n\r\ntype AddPostFormValuesType={\r\n  newPostText:string\r\n}\r\nexport type MapPropsType={\r\n  posts:Array<PostType>\r\n }\r\nexport type DispatchPropsType={\r\n  addPost:(newPostText:string)=>void\r\n}\r\nconst MyPosts:React.FC<MapPropsType & DispatchPropsType>= (props)=> {\r\n    let onAddPost = (values:AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n    // props.dispatch(addPostActionCreator());\r\n  }\r\n   let postsElements =\r\n    props.posts.map(p => <Post key={p.id} message={p.post} likesCount={p.likesCount} />);\r\n\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>Мои записи</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      {/* //Когда сасабмитиится форма вызовем колбэк и мы получим все данные из формы  */}\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nconst MyPostsMemorized=React.memo(MyPosts)\r\n\r\n\r\nexport default MyPostsMemorized;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",["572","573"],"import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Input, TextArea } from '../../Common/FormControl/FormsControls';\r\nimport s from './ProfileInfo.module.css'\r\nimport style from \"../../Common/FormControl/FormsControls.module.css\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { ProfileType } from '../../../Types/types';\r\n\r\ntype PropsType={\r\n  profile:ProfileType\r\n}\r\ntype ProfileTypeKeys=GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileType,PropsType> & PropsType>=({handleSubmit, profile,error}) => { //error параметр из StopSubmit редакс формы для получения кода ошибки\r\n    return  <form onSubmit={handleSubmit}>\r\n    <div><button>Save</button></div> \r\n    {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n    {/* В режиме редактирования кнопка редактирования поялвяется,если мы залогинены мы авторизованы */}\r\n   <div>\r\n     <b> Full name </b>: {createField<ProfileTypeKeys>(\"Full name\",\"fullName\",[],Input)}\r\n     \r\n   </div>\r\n   <div>\r\n     <b> Looking for a job </b>:{createField<ProfileTypeKeys>(\"\",\"lookingForAJob\",[],Input,{type:\"checkbox\"})}\r\n   </div>\r\n   {/* {profile.lookingForAJob &&   //Если работу ищем,тру,тогда отобразим дивку с описанием */}\r\n     <div>\r\n    <b>My Professional Skills</b>:{createField<ProfileTypeKeys>(\"My Professional Skills\",\"lookingForAJobDescription\",[],TextArea)}\r\n     </div>\r\n   \r\n   <div>\r\n     <b> About me </b>\r\n     {createField(\"About me\",\"aboutMe\",[],TextArea)}\r\n   </div>\r\n   <div>\r\n     <b> Contacts </b>:{Object.keys(profile.contacts).map(key => { //Пробегаем по массиву map и на базе каждого элемента рисуем компоненту Contact\r\n       return <div key={key} className={s.contact}> \r\n       <b>{key}:{createField(key,\"contacts.\"+key,[],Input)}</b>\r\n       {/* \"contacts.\"+key в параметрах,тк есть вложенность, контакты передаются вложенно на серверной части.Контакты-ватсап */}\r\n       </div>\r\n     }\r\n     )}\r\n   </div>\r\n   </form>\r\n  } \r\n  {/* //Если в режиме редактирования показываем ProfileDataForm для заполнения данных */}\r\n  \r\n const ProfileDataFormReduxForm =reduxForm<ProfileType, PropsType>({form:\"edit-profile\"})(ProfileDataForm)\r\n\r\n\r\n  export default ProfileDataFormReduxForm","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\FormControl\\AddPostForm.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["574"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts';\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    \r\n  } as MapPropsType\r\n}\r\n\r\nconst MyPostsContainer = connect <MapPropsType, DispatchPropsType, {}, AppStateType> (mapStateToProps, {\r\n  addPost:actions.addPostActionCreator\r\n}) (MyPosts);\r\nexport default MyPostsContainer;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\MyPosts\\Posts\\Post.tsx",["575","576"],"import React from 'react';\r\nimport s from '..//Posts/Post.module.css';\r\nimport avaPost from '..//../../../assets/images/bat.png'\r\nimport { PostType } from '../../../../Types/types';\r\n\r\ntype PropsType={\r\n  message:string\r\n  likesCount:number\r\n}\r\nconst Post:React.FC<PropsType> = (props) => {\r\n    return (\r\n          <div className={s.item}>\r\n          <img className='logo' src={avaPost}/>\r\n            {props.message}\r\n          \r\n          <div>\r\n            <span>like</span> {props.likesCount}\r\n          </div>\r\n          </div>\r\n          \r\n         )\r\n}\r\nexport default Post;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks..tsx",["577"],"import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType={\r\n  status:string\r\n  updateStatus:(status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsType> = (props) => {\r\n  // let stateWithSetState=useState(false);\r\n  // let editMode=stateWithSetState[0];\r\n  // let setEditMode= stateWithSetState[1];\r\n  let [editMode,setEditMode]=useState(false); //Деструктуризация массива (локальный стэйт,изменятся ли статус?)\r\n  let [status,setStatus]=useState(props.status); //Деструктуризация массива (локальный стэйт,что в статусе печатают, как изменяется?)\r\n\r\n  useEffect ( ()=>{         //Используем хук useEffect для синхронизации статуса,перерисует статус при его изменении\r\n    setStatus(props.status);  \r\n  }, [props.status]); //Синхронизируйся, когда изменится статус[props.status]\r\n\r\n  const activateEditMode=() =>{\r\n    setEditMode(true);\r\n  }\r\n  \r\n  const deactivateEditMode=() =>{\r\n    setEditMode(false);\r\n    props.updateStatus(status);//должны отправлять наверх родителю в стэйт инфу о статусе\r\n  }\r\n  const onStatusChange=(e:ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value); \r\n      }\r\n\r\n    return (\r\n  <div>\r\n    { !editMode &&\r\n      <div>\r\n       <b> Status: <span onDoubleClick={activateEditMode} > {props.status || \"-----\"}</span></b>\r\n      </div>\r\n    }\r\n    {editMode &&\r\n      <div>\r\n        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n      </div>\r\n    }\r\n  </div>\r\n)\r\n  }\r\nexport default ProfileStatusWithHooks;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\index.tsx",["578"],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Header\\HeaderContainer.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Header\\Header.tsx",["579","580","581"],"import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport s from './/.//Header.module.css';\r\nimport Logo from '../../Pirojkov.png'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\r\nimport {UserOutlined} from '@ant-design/icons'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\n\r\n\r\nexport type MapPropsType = {\r\n  // isAuth: boolean\r\n  // login: string | null\r\n}\r\nexport type DispatchPropsType = {\r\n  // logout: () => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n\r\n  const isAuth = useSelector(selectIsAuth)\r\n  const login = useSelector(selectCurrentUserLogin)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutCallback = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  const {Header} = Layout\r\n\r\n  return <Header className=\"header\">\r\n    <Row>\r\n      <Col span={18}>\r\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n          <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n        </Menu>\r\n      </Col>\r\n\r\n      {isAuth\r\n        ? <> <Col span={1}>\r\n                <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                  </Col>\r\n                  <Col span={1} style={{ color:\"white\" }}>{login}</Col>\r\n            <Col span={3}>\r\n            <Button onClick={logoutCallback}>Log out</Button>\r\n          </Col>\r\n        </>\r\n        : <Col span={6}>\r\n          <Button>\r\n            <Link to={'/login'}>Login</Link>\r\n          </Button>\r\n        </Col>}\r\n\r\n    </Row>\r\n\r\n\r\n  </Header>\r\n}\r\n  //OLD SCHOOL HEADER\r\n//        return <header className='header'>\r\n//         <img className='logo' src={Logo}/>\r\n\r\n//     <div className={s.LoginBlock}>\r\n//         {props.isAuth? \r\n//         <div> {props.login}-<button onClick={props.logout}>Log out</button> </div>\r\n//   : <NavLink to={'/login'}>Login</NavLink>}\r\n//     </div>\r\n\r\n//      </header>\r\n\r\n// }\r\n// export default Header;","C:\\SPA_socialNetwork\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx",["582"],"import React from 'react';\r\nimport Ajux_loader from '../../../assets/images/Ajux_loader.gif'\r\n\r\n\r\n\r\nlet Preloader:React.FC=()=> {\r\nreturn <div>\r\n    <img src={Ajux_loader} style={{backgroundColor:''}}/>\r\n</div>\r\n}\r\n\r\n\r\nexport default Preloader;\r\n","C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\components\\Users\\UsersSearchForm.tsx",[],"C:\\SPA_socialNetwork\\my-app\\src\\redux\\auth-selectors.ts",[],{"ruleId":"583","severity":1,"message":"584","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":15},{"ruleId":"587","replacedBy":"588"},{"ruleId":"589","replacedBy":"590"},{"ruleId":"583","severity":1,"message":"591","line":4,"column":7,"nodeType":"585","messageId":"586","endLine":4,"endColumn":27},{"ruleId":"592","severity":1,"message":"593","line":49,"column":26,"nodeType":"594","messageId":"595","endLine":55,"endColumn":10},{"ruleId":"592","severity":1,"message":"593","line":56,"column":32,"nodeType":"594","messageId":"595","endLine":61,"endColumn":10},{"ruleId":"592","severity":1,"message":"593","line":62,"column":27,"nodeType":"594","messageId":"595","endLine":67,"endColumn":10},{"ruleId":"596","severity":1,"message":"597","line":65,"column":53,"nodeType":"598","messageId":"599","endLine":65,"endColumn":55},{"ruleId":"596","severity":1,"message":"597","line":79,"column":65,"nodeType":"598","messageId":"599","endLine":79,"endColumn":67},{"ruleId":"583","severity":1,"message":"600","line":4,"column":17,"nodeType":"585","messageId":"586","endLine":4,"endColumn":30},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"602","line":1,"column":8,"nodeType":"585","messageId":"586","endLine":1,"endColumn":13},{"ruleId":"583","severity":1,"message":"603","line":4,"column":30,"nodeType":"585","messageId":"586","endLine":4,"endColumn":57},{"ruleId":"583","severity":1,"message":"604","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":26},{"ruleId":"583","severity":1,"message":"605","line":13,"column":7,"nodeType":"585","messageId":"586","endLine":13,"endColumn":17},{"ruleId":"583","severity":1,"message":"606","line":45,"column":7,"nodeType":"585","messageId":"586","endLine":45,"endColumn":21},{"ruleId":"596","severity":1,"message":"607","line":63,"column":20,"nodeType":"598","messageId":"599","endLine":63,"endColumn":22},{"ruleId":"608","severity":1,"message":"609","line":8,"column":9,"nodeType":"610","endLine":8,"endColumn":43},{"ruleId":"583","severity":1,"message":"611","line":1,"column":17,"nodeType":"585","messageId":"586","endLine":1,"endColumn":26},{"ruleId":"583","severity":1,"message":"612","line":1,"column":28,"nodeType":"585","messageId":"586","endLine":1,"endColumn":41},{"ruleId":"583","severity":1,"message":"613","line":4,"column":10,"nodeType":"585","messageId":"586","endLine":4,"endColumn":30},{"ruleId":"583","severity":1,"message":"614","line":4,"column":32,"nodeType":"585","messageId":"586","endLine":4,"endColumn":62},{"ruleId":"583","severity":1,"message":"615","line":30,"column":7,"nodeType":"585","messageId":"586","endLine":30,"endColumn":21},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"608","severity":1,"message":"609","line":7,"column":5,"nodeType":"610","endLine":7,"endColumn":58},{"ruleId":"583","severity":1,"message":"602","line":1,"column":8,"nodeType":"585","messageId":"586","endLine":1,"endColumn":13},{"ruleId":"583","severity":1,"message":"614","line":3,"column":32,"nodeType":"585","messageId":"586","endLine":3,"endColumn":62},{"ruleId":"583","severity":1,"message":"616","line":4,"column":8,"nodeType":"585","messageId":"586","endLine":4,"endColumn":21},{"ruleId":"608","severity":1,"message":"609","line":14,"column":8,"nodeType":"610","endLine":14,"endColumn":47},{"ruleId":"608","severity":1,"message":"609","line":9,"column":11,"nodeType":"610","endLine":9,"endColumn":48},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"617","line":3,"column":8,"nodeType":"585","messageId":"586","endLine":3,"endColumn":15},{"ruleId":"608","severity":1,"message":"609","line":13,"column":6,"nodeType":"610","endLine":13,"endColumn":36},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"618","line":3,"column":18,"nodeType":"585","messageId":"586","endLine":3,"endColumn":26},{"ruleId":"583","severity":1,"message":"619","line":3,"column":54,"nodeType":"585","messageId":"586","endLine":3,"endColumn":72},{"ruleId":"583","severity":1,"message":"620","line":3,"column":74,"nodeType":"585","messageId":"586","endLine":3,"endColumn":90},{"ruleId":"583","severity":1,"message":"621","line":4,"column":13,"nodeType":"585","messageId":"586","endLine":4,"endColumn":18},{"ruleId":"583","severity":1,"message":"622","line":7,"column":10,"nodeType":"585","messageId":"586","endLine":7,"endColumn":18},{"ruleId":"583","severity":1,"message":"604","line":8,"column":10,"nodeType":"585","messageId":"586","endLine":8,"endColumn":26},{"ruleId":"583","severity":1,"message":"623","line":1,"column":10,"nodeType":"585","messageId":"586","endLine":1,"endColumn":20},{"ruleId":"583","severity":1,"message":"624","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":17},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"608","severity":1,"message":"609","line":12,"column":29,"nodeType":"610","endLine":12,"endColumn":129},{"ruleId":"583","severity":1,"message":"625","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":17},{"ruleId":"583","severity":1,"message":"626","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":18},{"ruleId":"587","replacedBy":"627"},{"ruleId":"589","replacedBy":"628"},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"583","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"629","severity":1,"message":"630","line":1,"column":10,"nodeType":"585","messageId":"586","endLine":1,"endColumn":14},{"ruleId":"629","severity":1,"message":"623","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":20},{"ruleId":"587","replacedBy":"627"},{"ruleId":"589","replacedBy":"628"},{"ruleId":"629","severity":1,"message":"631","line":7,"column":10,"nodeType":"585","messageId":"586","endLine":7,"endColumn":16},{"ruleId":"629","severity":1,"message":"632","line":2,"column":7,"nodeType":"585","messageId":"586","endLine":2,"endColumn":23},{"ruleId":"629","severity":1,"message":"591","line":9,"column":7,"nodeType":"585","messageId":"586","endLine":9,"endColumn":27},{"ruleId":"592","severity":1,"message":"593","line":58,"column":26,"nodeType":"594","messageId":"595","endLine":64,"endColumn":10},{"ruleId":"592","severity":1,"message":"593","line":65,"column":32,"nodeType":"594","messageId":"595","endLine":70,"endColumn":10},{"ruleId":"592","severity":1,"message":"593","line":71,"column":27,"nodeType":"594","messageId":"595","endLine":76,"endColumn":10},{"ruleId":"596","severity":1,"message":"597","line":74,"column":53,"nodeType":"598","messageId":"599","endLine":74,"endColumn":55},{"ruleId":"592","severity":1,"message":"593","line":77,"column":34,"nodeType":"594","messageId":"595","endLine":82,"endColumn":10},{"ruleId":"629","severity":1,"message":"633","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":20},{"ruleId":"629","severity":1,"message":"634","line":7,"column":10,"nodeType":"585","messageId":"586","endLine":7,"endColumn":21},{"ruleId":"596","severity":1,"message":"597","line":94,"column":65,"nodeType":"598","messageId":"599","endLine":94,"endColumn":67},{"ruleId":"629","severity":1,"message":"635","line":24,"column":5,"nodeType":"585","messageId":"586","endLine":24,"endColumn":23},{"ruleId":"629","severity":1,"message":"625","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":17},{"ruleId":"629","severity":1,"message":"636","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":16},{"ruleId":"629","severity":1,"message":"637","line":3,"column":18,"nodeType":"585","messageId":"586","endLine":3,"endColumn":26},{"ruleId":"629","severity":1,"message":"638","line":3,"column":29,"nodeType":"585","messageId":"586","endLine":3,"endColumn":41},{"ruleId":"629","severity":1,"message":"639","line":3,"column":43,"nodeType":"585","messageId":"586","endLine":3,"endColumn":53},{"ruleId":"629","severity":1,"message":"640","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":17},{"ruleId":"629","severity":1,"message":"641","line":6,"column":9,"nodeType":"585","messageId":"586","endLine":6,"endColumn":20},{"ruleId":"629","severity":1,"message":"642","line":6,"column":21,"nodeType":"585","messageId":"586","endLine":6,"endColumn":39},{"ruleId":"629","severity":1,"message":"643","line":6,"column":40,"nodeType":"585","messageId":"586","endLine":6,"endColumn":54},{"ruleId":"629","severity":1,"message":"644","line":6,"column":69,"nodeType":"585","messageId":"586","endLine":6,"endColumn":91},{"ruleId":"629","severity":1,"message":"645","line":6,"column":93,"nodeType":"585","messageId":"586","endLine":6,"endColumn":101},{"ruleId":"629","severity":1,"message":"646","line":6,"column":103,"nodeType":"585","messageId":"586","endLine":6,"endColumn":117},{"ruleId":"629","severity":1,"message":"647","line":7,"column":10,"nodeType":"585","messageId":"586","endLine":7,"endColumn":18},{"ruleId":"629","severity":1,"message":"648","line":8,"column":10,"nodeType":"585","messageId":"586","endLine":8,"endColumn":22},{"ruleId":"629","severity":1,"message":"647","line":6,"column":10,"nodeType":"585","messageId":"586","endLine":6,"endColumn":18},{"ruleId":"649","severity":1,"message":"650","line":48,"column":6,"nodeType":"651","endLine":48,"endColumn":8,"suggestions":"652"},{"ruleId":"649","severity":1,"message":"653","line":61,"column":6,"nodeType":"651","endLine":61,"endColumn":27,"suggestions":"654"},{"ruleId":"629","severity":1,"message":"655","line":4,"column":10,"nodeType":"585","messageId":"586","endLine":4,"endColumn":21},{"ruleId":"629","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"587","replacedBy":"656"},{"ruleId":"589","replacedBy":"657"},{"ruleId":"629","severity":1,"message":"625","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":17},{"ruleId":"608","severity":1,"message":"609","line":30,"column":33,"nodeType":"610","endLine":30,"endColumn":62},{"ruleId":"629","severity":1,"message":"658","line":1,"column":29,"nodeType":"585","messageId":"586","endLine":1,"endColumn":37},{"ruleId":"629","severity":1,"message":"659","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":29},{"ruleId":"629","severity":1,"message":"660","line":1,"column":10,"nodeType":"585","messageId":"586","endLine":1,"endColumn":22},{"ruleId":"629","severity":1,"message":"626","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":18},{"ruleId":"629","severity":1,"message":"661","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":15},{"ruleId":"629","severity":1,"message":"662","line":3,"column":8,"nodeType":"585","messageId":"586","endLine":3,"endColumn":14},{"ruleId":"629","severity":1,"message":"600","line":4,"column":17,"nodeType":"585","messageId":"586","endLine":4,"endColumn":30},{"ruleId":"629","severity":1,"message":"663","line":11,"column":8,"nodeType":"585","messageId":"586","endLine":11,"endColumn":23},{"ruleId":"629","severity":1,"message":"664","line":17,"column":8,"nodeType":"585","messageId":"586","endLine":17,"endColumn":17},{"ruleId":"629","severity":1,"message":"665","line":1,"column":17,"nodeType":"585","messageId":"586","endLine":1,"endColumn":25},{"ruleId":"629","severity":1,"message":"625","line":2,"column":10,"nodeType":"585","messageId":"586","endLine":2,"endColumn":17},{"ruleId":"629","severity":1,"message":"626","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":18},{"ruleId":"629","severity":1,"message":"604","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":26},{"ruleId":"596","severity":1,"message":"597","line":42,"column":38,"nodeType":"598","messageId":"599","endLine":42,"endColumn":40},{"ruleId":"629","severity":1,"message":"617","line":3,"column":8,"nodeType":"585","messageId":"586","endLine":3,"endColumn":15},{"ruleId":"629","severity":1,"message":"666","line":6,"column":10,"nodeType":"585","messageId":"586","endLine":6,"endColumn":21},{"ruleId":"608","severity":1,"message":"609","line":24,"column":5,"nodeType":"610","endLine":24,"endColumn":48},{"ruleId":"608","severity":1,"message":"609","line":20,"column":29,"nodeType":"610","endLine":20,"endColumn":129},{"ruleId":"629","severity":1,"message":"616","line":4,"column":8,"nodeType":"585","messageId":"586","endLine":4,"endColumn":21},{"ruleId":"608","severity":1,"message":"609","line":42,"column":9,"nodeType":"610","endLine":42,"endColumn":80},{"ruleId":"629","severity":1,"message":"611","line":1,"column":17,"nodeType":"585","messageId":"586","endLine":1,"endColumn":26},{"ruleId":"629","severity":1,"message":"612","line":1,"column":28,"nodeType":"585","messageId":"586","endLine":1,"endColumn":41},{"ruleId":"629","severity":1,"message":"661","line":4,"column":10,"nodeType":"585","messageId":"586","endLine":4,"endColumn":15},{"ruleId":"629","severity":1,"message":"667","line":4,"column":17,"nodeType":"585","messageId":"586","endLine":4,"endColumn":26},{"ruleId":"629","severity":1,"message":"668","line":5,"column":10,"nodeType":"585","messageId":"586","endLine":5,"endColumn":26},{"ruleId":"629","severity":1,"message":"658","line":5,"column":28,"nodeType":"585","messageId":"586","endLine":5,"endColumn":36},{"ruleId":"629","severity":1,"message":"669","line":6,"column":10,"nodeType":"585","messageId":"586","endLine":6,"endColumn":18},{"ruleId":"629","severity":1,"message":"623","line":6,"column":10,"nodeType":"585","messageId":"586","endLine":6,"endColumn":20},{"ruleId":"592","severity":1,"message":"593","line":48,"column":3,"nodeType":"594","messageId":"595","endLine":48,"endColumn":90},{"ruleId":"629","severity":1,"message":"602","line":1,"column":8,"nodeType":"585","messageId":"586","endLine":1,"endColumn":13},{"ruleId":"629","severity":1,"message":"670","line":4,"column":10,"nodeType":"585","messageId":"586","endLine":4,"endColumn":18},{"ruleId":"608","severity":1,"message":"609","line":13,"column":11,"nodeType":"610","endLine":13,"endColumn":48},{"ruleId":"629","severity":1,"message":"601","line":2,"column":8,"nodeType":"585","messageId":"586","endLine":2,"endColumn":9},{"ruleId":"629","severity":1,"message":"584","line":3,"column":10,"nodeType":"585","messageId":"586","endLine":3,"endColumn":15},{"ruleId":"629","severity":1,"message":"671","line":2,"column":16,"nodeType":"585","messageId":"586","endLine":2,"endColumn":23},{"ruleId":"629","severity":1,"message":"601","line":3,"column":8,"nodeType":"585","messageId":"586","endLine":3,"endColumn":9},{"ruleId":"629","severity":1,"message":"672","line":4,"column":8,"nodeType":"585","messageId":"586","endLine":4,"endColumn":12},{"ruleId":"608","severity":1,"message":"609","line":8,"column":5,"nodeType":"610","endLine":8,"endColumn":58},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["673"],"no-negated-in-lhs",["674"],"'UPDATE_NEW_POST_TEXT' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'BrowserRouter' is defined but never used.","'s' is defined but never used.","'React' is defined but never used.","'updateNewMessageBodyCreator' is defined but never used.","'withAuthRedirect' is defined but never used.","'addmessage' is assigned a value but never used.","'newMessageBody' is assigned a value but never used.","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'PureComponent' is defined but never used.","'addPostActionCreator' is defined but never used.","'updateNewPostTextActionCreator' is defined but never used.","'newPostElement' is assigned a value but never used.","'ProfileStatus' is defined but never used.","'MyPosts' is defined but never used.","'setUsers' is defined but never used.","'setTotalUsersCount' is defined but never used.","'toggleIsFetching' is defined but never used.","'axios' is defined but never used.","'usersAPI' is defined but never used.","'stopSubmit' is defined but never used.","'authAPI' is defined but never used.","'connect' is defined but never used.","'Redirect' is defined but never used.",["673"],["674"],"@typescript-eslint/no-unused-vars","'type' is defined but never used.","'Action' is defined but never used.","'InitialStateType' is defined but never used.","'PhotosType' is defined but never used.","'ThunkAction' is defined but never used.","'state' is defined but never used.","'follow' is defined but never used.","'unfollow' is defined but never used.","'requestUsers' is defined but never used.","'FilterType' is defined but never used.","'compose' is defined but never used.","'getPageSize' is defined but never used.","'getTotalUsersCount' is defined but never used.","'getCurrentPage' is defined but never used.","'getFollowingInProgress' is defined but never used.","'getUsers' is defined but never used.","'getUsersFilter' is defined but never used.","'UserType' is defined but never used.","'AppStateType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.","ArrayExpression",["675"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["676"],"'ProfileType' is defined but never used.",["673"],["674"],"'required' is defined but never used.","'LoginFormValuesType' is defined but never used.","'AxiosPromise' is defined but never used.","'Field' is defined but never used.","'Navbar' is defined but never used.","'HeaderContainer' is defined but never used.","'Preloader' is defined but never used.","'Suspense' is defined but never used.","'saveProfile' is defined but never used.","'reduxForm' is defined but never used.","'maxLengthCreator' is defined but never used.","'TextArea' is defined but never used.","'PostType' is defined but never used.","'NavLink' is defined but never used.","'Logo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"681","text":"682"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"683","text":"684"},[2357,2359],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2789,2810],"[filter, currentPage, history]"]