{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","assets/images/bat.png","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks..jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","assets/images/GORA.png","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","avaPost","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","TextArea","validate","required","MyPosts","React","memo","postsElements","posts","map","p","post","postsBlock","values","addPost","newPostText","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","photos","large","Preloader","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","GORA","ProfileContainer","userID","this","match","params","authorizedUserID","history","push","getUserProfile","getStatus","compose","auth","userId","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d2981ffa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1LTVN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__11V8o\",\"posts\":\"MyPosts_posts__29h57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__iYXBa\"};","export default __webpack_public_path__ + \"static/media/bat.9459e308.png\";","import React from 'react';\r\nimport s from '..//Posts/Post.module.css';\r\nimport avaPost from '..//../../../assets/images/bat.png'\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n          <div className={s.item}>\r\n          <img className='logo' src={avaPost}/>\r\n            {props.message}\r\n          \r\n          <div>\r\n            <span>like</span> {props.likesCount}\r\n          </div>\r\n          </div>\r\n          \r\n         )\r\n}\r\nexport default Post;\r\n","import React, { Component, PureComponent } from 'react';\r\nimport s from '..//MyPosts/MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../validators/validators';\r\nimport { TextArea } from '../../Common/FormControl/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nlet AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <Field name=\"newPostText\" component={TextArea}\r\n      validate={[required, maxLength10]} />\r\n    {/* <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} /> */}\r\n    {/* <div><button onClick={onAddPost}>Добавить пост</button> */}\r\n    <div><button>Добавить пост</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: \"profileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts= React.memo(props=> {\r\n\r\n\r\n// shouldComponentUpdate (nextProps, nextState) { // true false, если пропсы пришли другие то возвращаем true и отрисовываем компоненту нужно обновить ее\r\n// return nextProps !=this.props || nextState !=this.state;\r\n// }  этот метод жизненного цикла можно заменить наследованием PureComponent чистой компонентой от реакта\r\n\r\n  let newPostElement = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании поста.Далее привяжем ссылку к текст Area */\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n    // props.dispatch(addPostActionCreator());\r\n  }\r\n\r\n  // let onPostChange = () => {\r\n  //   let text = newPostElement.current.value;\r\n  //   props.updateNewPostText(text);\r\n  //   //  let action ={type:'UPDATE-NEW-POST-TEXT', newText:text};\r\n  //   // let action=updateNewPostTextActionCreator(text);\r\n  //   //    props.dispatch(action);\r\n  // } //Упразднено т.к используем форму редакс\r\n\r\n  /*\r\n  let posts=[\r\n    {id:1, post:'Hello, I try to be better', likesCount:12},\r\n    {id:2, post:'Hello, its my second post', likesCount:69},\r\n    {id:3, post:'ZZzzzZZZZ',likesCount:241},\r\n    {id:4, post:'Yo!Yo!YO!',likesCount:245},\r\n    {id:5, post:'HEYYYY MAN',likesCount:364}\r\n  ]\r\n  */\r\n\r\n  let postsElements =\r\n    props.posts.map(p => <Post message={p.post} likesCount={p.likesCount} />);\r\n\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>Мои записи</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      {/* //Когда сасабмитиится форма вызовем колбэк и мы получим все данные из формы  */}\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n  \r\n\r\n  state = {\r\n    editMode: false,\r\n    status:this.props.status\r\n      }\r\n\r\nactivateEditMode (){\r\n  this.setState({\r\n    editMode:true,\r\n  })\r\n\r\n}\r\ndeactivateEditMode (){\r\n  this.setState({\r\n    editMode:false,\r\n    \r\n  });\r\n  this.props.updateStatus(this.state.status);\r\n  }\r\n  onStatusChange=(e) => {\r\n    this.setState({\r\n      status:e.currentTarget.value\r\n    }); \r\n    \r\n  }\r\n\r\ncomponentDidUpdate (prevProps, prevState) {\r\n  if(prevProps.status !==this.props.status) {\r\n    this.setState({\r\n      status:this.props.status\r\n    });\r\n  }\r\n\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode &&\r\n          <div>\r\n            <span onDoubleClick={ this.activateEditMode.bind(this) }> {this.props.status || \"-----\"}</span>\r\n          </div>\r\n        }\r\n        {this.state.editMode &&\r\n          <div>\r\n            <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.state.status} />\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ProfileStatus;\r\n","import React, { useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  // let stateWithSetState=useState(false);\r\n  // let editMode=stateWithSetState[0];\r\n  // let setEditMode= stateWithSetState[1];\r\n  let [editMode,setEditMode]=useState(false); //Деструктуризация массива (локальный стэйт,изменятся ли статус?)\r\n  let [status,setStatus]=useState(props.status); //Деструктуризация массива (локальный стэйт,что в статусе печатают, как изменяется?)\r\n\r\n  useEffect ( ()=>{         //Используем хук useEffect для синхронизации статуса,перерисует статус при его изменении\r\n    setStatus(props.status);  \r\n  }, [props.status]); //Синхронизируйся, когда изменится статус[props.status]\r\n\r\n  const activateEditMode=() =>{\r\n    setEditMode(true);\r\n  }\r\n  \r\n  const deactivateEditMode=() =>{\r\n    setEditMode(false);\r\n    props.updateStatus(status);//должны отправлять наверх родителю в стэйт инфу о статусе\r\n  }\r\n  const onStatusChange=(e) => {\r\n    setStatus(e.currentTarget.value); \r\n      }\r\n\r\n    return (\r\n  <div>\r\n    { !editMode &&\r\n      <div>\r\n        <span onDoubleClick={activateEditMode} > {props.status || \"-----\"}</span>\r\n      </div>\r\n    }\r\n    {editMode &&\r\n      <div>\r\n        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n      </div>\r\n    }\r\n  </div>\r\n)\r\n  }\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.';\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n    return (\r\n    <div className={s.descriptionBlock}>\r\n       <img src={props.profile.photos.large}/>\r\n      INFORMATION+AVA+DESCRIPTION\r\n      <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n    </div>  \r\n    )\r\n       \r\n}\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\n\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//   // let state=props.store.getState();\r\n\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {\r\n//         store => {\r\n//           let state = store.getState();\r\n//           let addPost = () => {\r\n//             store.dispatch(addPostActionCreator());\r\n//           }\r\n//           let onPostChange = (text) => {\r\n\r\n//             let action = updateNewPostTextActionCreator(text);\r\n//             store.dispatch(action);\r\n//           }\r\n//           return <MyPosts updateNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             posts={state.profilePage.posts}\r\n//             newPostText={state.profilePage.newPostText} />\r\n//         }\r\n//       }\r\n//     </StoreContext.Consumer>\r\n//   )\r\n\r\n// }\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // updateNewPostText: (text) => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //   dispatch(action);\r\n    // },упразднен с использованием форм редакса\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\nexport default MyPostsContainer;\r\n","export default __webpack_public_path__ + \"static/media/GORA.c094f5b0.png\";","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\r\nimport GORA from '../..//assets/images/GORA.png';\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n    <div>\r\n    <div>\r\n     <img className='' src={GORA}/>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n      \r\n    </div>    \r\n    </div> \r\n    )     \r\n    \r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n componentDidMount () {\r\n  let userID=this.props.match.params.userID;\r\n  if (!userID) {\r\n    userID=this.props.authorizedUserID;\r\n    if(!userID) {\r\n      this.props.history.push(\"/login\");\r\n    }\r\n  }\r\n  this.props.getUserProfile(userID);\r\n  this.props.getStatus(userID);\r\n}\r\n\r\n\r\n\r\n render () {\r\n   \r\n\r\n    return (\r\n      <Profile {...this.props}\r\n      profile={this.props.profile} \r\n      status={this.props.status} \r\n      updateStatus={this.props.updateStatus}/>\r\n                 \r\n    )     \r\n    \r\n}\r\n}\r\nlet mapStateToProps =(state) => ({\r\n  profile:state.profilePage.profile,\r\n  status:state.profilePage.status,\r\n  authorizedUserID: state.auth.userId, //state-BLL уровень, auth-ветка там, где мы комбайним редьюсеры, userId-ID пользователя\r\n  isAuth:state.auth.isAuth\r\n });\r\nexport default compose (\r\n     connect(mapStateToProps,{getUserProfile, getStatus, updateStatus}),\r\n     withRouter,\r\n    //withAuthRedirect\r\n    )(ProfileContainer);\r\n      \r\n// let AuthRedirectComponent= withAuthRedirect(ProfileContainer);\r\n\r\n// let WithURLDataContainerComponent= withRouter(AuthRedirectComponent);\r\n// export default connect(mapStateToProps,{getUserProfile}) (WithURLDataContainerComponent);\r\n"],"sourceRoot":""}