{"version":3,"sources":["redux/dialogs-reducer.js","components/Users/users.module.css","components/Header/Header.module.css","components/hok/withAuthRedirect.js","api/api.js","components/Navbar/Navb.module.css","redux/sidebar-reducer.js","components/utilites/object-helpers.js","redux/user-reducer.js","redux/auth-reducer.js","redux/app-reducer.js","redux/redux-store.js","components/Navbar/Navbar.jsx","components/Music/Music.jsx","components/Video/Video.jsx","components/Security/Security.jsx","components/News/News.jsx","components/Settings/Settings.jsx","components/About_us/About_us.jsx","components/Common/Paginator/Paginator.jsx","assets/images/User.png","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","Pirojkov.png","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","App.js","components/hok/withSuspence.js","serviceWorker.js","index.js","components/Common/FormControl/FormsControls.module.css","components/Common/FormControl/FormsControls.js","assets/images/Ajux_loader.gif","components/Common/Preloader/Preloader.js","components/Common/Paginator/Paginator.module.css","components/validators/validators.js","redux/profile-reducer.js"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userID","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","sidebarReducer","updateObjectInArray","items","itemID","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOOGLE_IS_FETCHING","TOOGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userId","unfollowSuccess","setCurrentPage","page","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","slidebarReducer","usersPage","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","className","s","nav","activeClassName","activeLink","Music","Video","Security","News","Settings","About_us","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","e","User","user","src","photos","small","userPhoto","disabled","some","Users","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","Preloader","bind","totalCount","Header","Logo","LoginBlock","HeaderContainer","LoginReduxForm","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","required","error","style","formSummaryError","length","stopSubmit","_error","formData","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","fallback","withRouter","promise","Promise","all","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","input","meta","child","hasError","touched","formControl","children","TextArea","restProps","Ajux_loader","backgroundColor","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","postID"],"mappings":"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","file":"static/js/main.62a4d5cb.chunk.js","sourcesContent":["\r\n// const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: 'Димасик' },\r\n        { id: 2, name: 'Евген' },\r\n        { id: 3, name: 'Искандер' },\r\n        { id: 4, name: 'Дон Дьябло' },\r\n        { id: 5, name: 'Андрей' }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Привет!)' },\r\n        { id: 2, message: 'Как твои дела?' },\r\n        { id: 3, message: 'У тебя все получится!' },\r\n        { id: 4, message: 'Yo!Yo!YO!' },\r\n        { id: 5, message: 'HEYYYY MAN' },\r\n        { id: 6, message: 'Do you know? Enrique)' }\r\n    ],\r\n    // newMessageBody: \" \"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        // case UPDATE_NEW_MESSAGE_BODY:\r\n        //     return {\r\n        //         ...state,\r\n        //         // messages:[...state.messages]\r\n        //         newMessageBody: action.body\r\n        //     };\r\n            // stateCopy.messages=[...state.messages];\r\n            // stateCopy.newMessageBody = action.body;    //  action.body приходит из внешнего мира UI\r\n            case SEND_MESSAGE:\r\n            // let body = state.newMessageBody; старый вариант, сообщение брали из стэйта\r\n            let body = action.newMessageBody; \r\n            // новый вариант, с помощью редакс форм\r\n            return {\r\n                ...state,\r\n                // newMessageBody: ' ',\r\n                messages: [...state.messages, { id: 6, message: body }]\r\n            };\r\n\r\n            // stateCopy.messages.push({ id: 6, message: body });\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({ type: SEND_MESSAGE, newMessageBody })                //  Для UI создаем ActionCreator-ы, реализуем отправку сообщения, создание сообщения\r\n// export const updateNewMessageBodyCreator = (body) => ({ type: UPDATE_NEW_MESSAGE_BODY, body: body }) // Обновление стэйта с каждым нажатием кнопки. С использованием форм редакса стало не нужно\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3GjQ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginBlock\":\"Header_LoginBlock__2x_fm\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nlet mapStateToPropsForRedirect =(state) => ({\r\n    isAuth:state.auth.isAuth\r\n   });\r\n\r\nexport const withAuthRedirect=(Component)=> {\r\n\r\n    class RedirectComponent extends React.Component {\r\n    render () {\r\n    if(!this.props.isAuth) return <Redirect to ={\"/login\"}/>;\r\n    return <Component {...this.props}/>\r\n  }\r\n}\r\n  let ConnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n  \r\nreturn ConnectedAuthRedirectComponent;\r\n} ","import * as axios from 'axios';\r\n\r\n\r\nconst instance=axios.create({\r\n    withCredentials:true, //Означает только зарегистрированному пользователю разрешить\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"6bbbf898-afb4-44c4-874f-ee6620e5c06f\"\r\n    }\r\n});\r\n\r\nexport const usersAPI= {\r\n    getUsers (currentPage=1, pageSize=10){ //Группируем методы в созданном объекте userAPI\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then (response=>{\r\n             return  response.data;\r\n           });  //Промисы, получаем в ответе только те данные от сервера,что нам нужны\r\n     },\r\n     follow (userID) {\r\n        return instance.post(`follow/${userID}`)\r\n     },\r\n\r\n     \r\n\r\n     unfollow (userID) {\r\n       return instance.delete(`follow/${userID}`)\r\n     },\r\n     getProfile (userID) {\r\n        console.warn('Obsolete method. Please profileAPI object')\r\n        return profileAPI.getProfile(userID);\r\n               },\r\n     \r\n}\r\n\r\nexport const profileAPI= { //Для локального стэйта. Статус и тд\r\ngetProfile(userID) {\r\n    return instance.get(`profile/`+userID);\r\n},\r\ngetStatus(userID){\r\n  return instance.get(`profile/status/`+userID);\r\n},\r\nupdateStatus(status){\r\n  return instance.put(`profile/status/`,{status:status}); //Отправляем на сервер объект, объект имеет значение параметр статус\r\n\r\n},\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const authAPI= { //Компонента для DAL уровня, аутентификация пользователя\r\nme() {  //Метод, дай мне меня\r\n   return instance.get(`auth/me`)\r\n }, \r\n login(email, password, rememberMe=false) {\r\nreturn instance.post(`auth/login`, {email, password, rememberMe});\r\n }, \r\n logout() {\r\n  return instance.delete(`auth/login`);\r\n   },          \r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navb_nav__3tlRu\",\"activeLink\":\"Navb_activeLink__3i_FY\"};"," let initialState= {};\r\n \r\n const sidebarReducer= (state=initialState,action) => {\r\n\r\n    return state;\r\n}\r\n\r\n\r\nexport default sidebarReducer;","\r\n// Из user-reducer берем фрагмент кода\r\nexport const updateObjectInArray=(items, itemID, objPropName,newObjProps)=>{\r\n    return items.map(u => {                \r\n        if (u[objPropName] === itemID) {\r\n            return { ...u, ...newObjProps }\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import { usersAPI } from \"../api/api\";\r\nimport { updateObjectInArray } from \"../components/utilites/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOOGLE_IS_FETCHING = 'TOOGLE_IS_FETCHING';\r\nconst TOOGLE_IS_FOLLOWING_PROGRESS = 'TOOGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,   //В UsersContainer в State передаем\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n};\r\n\r\n\r\nexport const usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n                    return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                \r\n                //users:[...state.users],\r\n                // users: state.users.map(u => {                 // 6) Чтоб скопировать массив глубинно и значения массива изменялись, нужно добавить map();\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: true }\r\n                //     }\r\n                //     return u;\r\n\r\n                // })\r\n            }\r\n           \r\n        case UNFOLLOW:\r\n            \r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                // users:[...state.users],\r\n                // users: state.users.map(u => {                 // 6) Чтоб скопировать массив глубинно и значения массива изменялись, нужно добавить map();\r\n                //     if (u.id === action.userId) {\r\n                //         return { ...u, followed: false }\r\n                //     }\r\n                //     return u;\r\n\r\n                // })\r\n            }\r\n            \r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }  // 8) Берем пользователей из Action и подсовываем в state, перезатираем пользователей\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }  // 15) Отображение стр.пагинации пользователей\r\n\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }  // 16) Отображение пользователей\r\n\r\n        }\r\n\r\n        case TOOGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }  // 17) Отображение preloader\r\n\r\n        }\r\n        case TOOGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n\r\n                //Фильтруем массив пропускаем только ту ID которая не равна той ID которая пришла в action    \r\n                // Если у нас isFetching=true то в массив добавляем новую ID-шку                   \r\n            }      // Если у нас isFetching=false то создвем новый массив   \r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })   // 5) Создаем копию STATE,чтоб не копировать целиком объект (это не правильно, имьютабельность нарушится)\r\n\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })        // 7) Берем юзеров списком из сервака, установим их в State\r\n\r\nexport const setCurrentPage = (page) => ({ type: SET_CURRENT_PAGE, currentPage: page })\r\n\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOOGLE_IS_FETCHING, isFetching })\r\n\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));  //Я бизнес уровень,я активирую крутилку (загрузка, ожидание)\r\n        dispatch(setCurrentPage(page)); //Диспатчим текущую страницу\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        // .then(data => {\r\n\r\n        dispatch(toggleIsFetching(false));  //Я бизнес уровень,ответ с сервера пришел, крутилку выключаем\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        // });\r\n\r\n    }\r\n\r\n}\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => { //Рефакторинг.Общий метод.Универсальная функция для follow unfollow\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n//Создаем вторую санку, для follow\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default usersReducer;","import { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                //  isAuth:true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } })       // 1) Создаем компоненту JSX 2)Добавляем в APP.js ее (USERS) 3) Создаем REDUCERS для USERS 4) Добавляем ActionCreators-слушателей на кнопки и т.д\r\nexport const getAuthUserData = () => async (dispatch) => {  //Создаем САНКУ санк криэйтор\r\n    let response = await authAPI.me();\r\n    // .then(response => {  bcgjkmpetv async await не нужна обертка и then избавляемся от промисов\r\n    if (response.data.resultCode === 0) {\r\n        let { id, login, email } = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {  //Создаем САНКУ для логинизации санк криэйтор\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    // .then(response => {  \r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", { _error: message }));\r\n\r\n    }\r\n}\r\nexport const logout = () => async (dispatch) => {  //Создаем САНКУ для логинизации санк криэйтор\r\n    let response = await authAPI.logout();\r\n    // .then(response => {  \r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\nexport default authReducer;","import { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/api\";\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\n\r\n\r\nlet initialState= {\r\n    initialized: false\r\n};\r\n\r\n\r\nconst appReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: \r\n             return {\r\n             ...state, \r\n             initialized: true //Стэйт копируем для того,что если будет еще экшен не перезатер наше состояние state\r\n         }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const inintializedSuccess= () => ({ type: INITIALIZED_SUCCESS }) //Задиспатчик экшен криэйтор\r\n\r\nexport const initializeApp=()=>(dispatch)=>{  //Создаем САНКУ санк криэйтор для инициализации\r\n         let promise= dispatch(getAuthUserData());  //Диспатч не только передает вызов фкункции но и возвращает результат выполнения функции return \r\n         //dispatch(somethingElse());\r\n         //dispatch(somethingElse());\r\n            Promise.all([promise])\r\n            .then(()=>{\r\n             dispatch(inintializedSuccess());\r\n         });        \r\n}       \r\n\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers,compose,createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport slidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './user-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware from \"redux-thunk\";   //Мы подключаем санковый мидлвээр, базовый, который установился по дефолту\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\nlet reducers= combineReducers ({\r\nprofilePage:profileReducer,\r\ndialogsPage:dialogsReducer,\r\nsidebar:slidebarReducer,\r\nusersPage: usersReducer,   //Reducer зарегистрировали, в State будет UsersPage теперь\r\nauth:authReducer,\r\napp:appReducer,\r\nform:formReducer\r\n});\r\n// Добавляем строки для работы с расширением стор от хром\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware))); // Создание нового стора с расширением для хрома\r\n\r\n// let store=createStore(reducers, applyMiddleware(thunkMiddleware.withExtraArgument('string'))); создание старого стора без расширения для хрома\r\n\r\nwindow.__store__=store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Navb.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Профиль</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Сообщения</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Пользователи</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/music\" activeClassName={s.activeLink}>Аудиозаписи</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/video\" activeClassName={s.activeLink}>Видеозаписи</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/news\" activeClassName={s.activeLink}>Новости</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/settings\" activeClassName={s.activeLink}>Настройки</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/security\" activeClassName={s.activeLink}>Безопасность</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/about_us\" activeClassName={s.activeLink}>О проекте</NavLink>\r\n\r\n\r\n        </div>\r\n        \r\n\r\n    </nav>\r\n}\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport s from './/.//Music.module.css';\r\nconst Music= (props) => {\r\n  return (\r\n   <div>\r\n       Music!!!!!\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Music;","import React from 'react';\r\nimport s from './/.//Video.module.css';\r\nconst Video= (props) => {\r\n  return (\r\n   <div>\r\n       Video\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Video;","import React from 'react';\r\nimport s from './/.//Security.module.css';\r\nconst Security= (props) => {\r\n  return (\r\n   <div>\r\n       Security\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Security;","import React from 'react';\r\nimport s from './/.//News.module.css';\r\nconst News= (props) => {\r\n  return (\r\n   <div>\r\n       News\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default News;","import React from 'react';\r\nimport s from './/.//Settings.module.css';\r\nconst Settings= (props) => {\r\n  return (\r\n   <div>\r\n       Settings\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport s from './/.//About_us.module.css';\r\nconst About_us= (props) => {\r\n  return (\r\n   <div>\r\n       About_us\r\n   </div>\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\nexport default About_us;","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    \r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/User.c62711b8.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/User.png';\r\nimport styles from './users.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nlet User = ({user,followingInProgress,unfollow,follow}) => {\r\n       return (\r\n       <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed \r\n                            ? <button disabled={followingInProgress\r\n                                .some( id=>id===user.id)} \r\n                                onClick={() => {unfollow(user.id)}}> \r\n                                Unfollow</button>       // /* // В пропсах обращаемся к follow props.follow(u.id), так как в UserContainer в mapDispatchToProps у нас есть такая функция, принимает пользовательский id - */                                 \r\n                        : <button disabled={followingInProgress.some(id=>id===user.id)} \r\n                            onClick={() => {follow(user.id) }}>  \r\n                            {/* //Если хотябы кто кто нибудь из этого массива some равен (true) id пользователя то метод some вернет true */}\r\n                                                                  \r\n                            Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n\r\n            </div>)\r\n        }\r\n\r\nexport default User;","import React from 'react';\r\nimport Paginator from '../Common/Paginator/Paginator';\r\nimport User from './User';\r\n\r\n\r\nlet Users = ({currentPage,onPageChanged,totalUsersCount,pageSize,users,...props}) => {\r\n\r\n    // let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);  /// Количество страниц чтоб узнать отображаемых пользователей, делим количество пользователей на серваке на количество пользователей на одну страницу и округляем в большую сторону\r\n    // let pages = [];\r\n    // for (let i = 1; i <= pagesCount; i++) {\r\n    //     pages.push(i);\r\n\r\n    // }\r\n    return <div>\r\n        {/* <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p && styles.selectedPage}\r\n                    onClick={(e) => { props.onPageChanged(p) }}>{p}</span>\r\n            })}\r\n        </div> */}\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n        pageSize={pageSize} totalItemsCount={totalUsersCount}/>\r\n        <div>\r\n        {\r\n            users.map(u => <User user={u} \r\n                followingInProgress={props.followingInProgress}\r\n                unfollow={props.unfollow}\r\n                follow={props.follow}\r\n                 key={u.id}\r\n                 />)\r\n            }\r\n            \r\n        </div>\r\n        </div>\r\n}\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector=(state)=> {\r\n    return state.usersPage.users;    //Из UsersContainer компоненты->mapStateToProps достаем пользователей \r\n}\r\n\r\n// export const getUsersSelector=(state)=> {\r\n//     return getUsers(state).filter(u=>true);    //фильтрация пользователей \r\n// }\r\n\r\nexport const getUsers=createSelector(getUsersSelector, // Добавили зависимость, селектор зависит от изменения пользователей\r\n    (users)=>{  // Создаем селектор с помощью библиотеки реселект\r\n    return users.filter(u=>true);   \r\n})\r\n     \r\nexport const getPageSize=(state)=> {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount=(state)=> {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage=(state)=> {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching=(state)=> {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress=(state)=> {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { follow, setUsers, unfollow, setCurrentPage, setTotalUsersCount, toggleIsFetching, toggleFollowingProgress, requestUsers } from '../../redux/user-reducer';\r\nimport * as axios from 'axios';\r\nimport Users from './Users';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { usersAPI } from '../../api/api';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport {getPageSize,getTotalUsersCount,getCurrentPage,getIsFetching,getFollowingInProgress, getUsers} from '../../redux/users-selectors';\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component {           //extends React.Component-благодаря этой записи Реакт за кадром напишет new User и создаст нового пользователя.При этом constructor(props), super(props) можно не писать, делегирование и прокдывание пропсов произойдет за кадром в реакт\r\n\r\n    componentDidMount() {\r\n                 this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n            }\r\n\r\n  onPageChanged=(pageNumber) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize);\r\n      }\r\n    render() {\r\n       \r\n\r\n        return <>\r\n        {this.props.isFetching ? \r\n        <Preloader/>: null}\r\n        <Users totalUsersCount={this.props.totalUsersCount}\r\n        pageSize={this.props.pageSize}\r\n        currentPage={this.props.currentPage}\r\n        onPageChanged={this.onPageChanged}\r\n        users={this.props.users}\r\n        follow={this.props.follow}\r\n        unfollow={this.props.unfollow}\r\n        // toggleFollowingProgress={this.props.toggleFollowingProgress}  \r\n        followingInProgress={this.props.followingInProgress}  \r\n        />\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//Используем для создания селектора\r\n// let mapStateToProps = (state) =>{                // mapStateToProps-функция- принимает весь глобальный стэйт целиком и возвращает объект с данными который нам нужен в данной, контейнерной компоненте\r\n// return {\r\n//     users:state.usersPage.users,                // Компонента получает USERS, то есть в презентационной (чистой) компоненте будет users   \r\n//     pageSize:state.usersPage.pageSize,\r\n//     totalUsersCount:state.usersPage.totalUsersCount,  \r\n//     currentPage:state.usersPage.currentPage,\r\n//     isFetching:state.usersPage.isFetching,\r\n//     followingInProgress:state.usersPage.followingInProgress  \r\n// }\r\nlet mapStateToProps = (state) =>{                // mapStateToProps-функция- принимает весь глобальный стэйт целиком и возвращает объект с данными который нам нужен в данной, контейнерной компоненте\r\n  return {\r\n      users:getUsers(state),\r\n      // users:getUsersSelector(state),                // Компонента получает USERS, то есть в презентационной (чистой) компоненте будет users   \r\n      pageSize:getPageSize(state),\r\n      totalUsersCount:getTotalUsersCount(state), \r\n      currentPage:getCurrentPage(state),\r\n      isFetching:getIsFetching(state),\r\n      followingInProgress:getFollowingInProgress(state)\r\n  }\r\n\r\n\r\n}\r\n// let mapDispatchToProps =(dispatch)=> {                 // Компонента получает callback-и которые может вызвать\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId));            // Диспатчим, передаем результат работы ActionCratora-\r\n//         },\r\n//         unfollow: (userId) => {\r\n//             dispatch(unfollowAC(userId));            // Диспатчим, передаем результат работы ActionCratora-\r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setCurrentPage: (pageNumber)=> {\r\n//             dispatch(setCurrentPageAC(pageNumber));\r\n//         },\r\n//         setTotalUsersCount: (totalCount)=> {\r\n//             dispatch(setTotalUsersCountAC(totalCount));\r\n//         },\r\n//         toggleIsFetching: (isFetching)=> {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//         }\r\n        \r\n//     }\r\n\r\n// }\r\n\r\n// let withRedirect=withAuthRedirect(UsersContainer)\r\n// export default connect (mapStateToProps, \r\n// {follow, unfollow,setCurrentPage,toggleFollowingProgress, getUsers}) (withRedirect);      // Путь до функциональной (или классовой) компоненты к которой хотим достучаться. App.js->UserContainer->UsersC\r\n\r\nexport default compose(\r\n  // withAuthRedirect,\r\n  connect (mapStateToProps,{follow, unfollow,setCurrentPage,toggleFollowingProgress, getUsers: requestUsers})\r\n)(UsersContainer)","export default __webpack_public_path__ + \"static/media/Pirojkov.734f9ee1.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './/.//Header.module.css';\r\nimport Logo from '../../Pirojkov.png'\r\n\r\nconst Header = (props) => {\r\n       return <header className='header'>\r\n        <img className='logo' src={Logo}/>\r\n\r\n    <div className={s.LoginBlock}>\r\n        {props.isAuth? \r\n        <div> {props.login}-<button onClick={props.logout}>Log out</button> </div>\r\n  : <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n\r\n     </header>\r\n\r\n}\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    // componentDidMount () {\r\n    //     this.props.getAuthUserData();\r\n    // }\r\n    \r\n    render() {\r\n    return <Header {...this.props} />\r\n\r\n    \r\n    }\r\n}\r\nconst mapStateToProps=(state)=> ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n\r\n});\r\n\r\nexport default connect (mapStateToProps, { logout}) (HeaderContainer);","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../Common/FormControl/FormsControls';\r\nimport { required } from '../validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from \"./../Common/FormControl/FormsControls.module.css\";\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input}\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"} component={Input}\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input} /> remember me\r\n           </div>\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ //a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\nexport default connect(mapStateToProps, { login })(Login);","import React, { Component, Suspense } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, BrowserRouter, withRouter } from 'react-router-dom';\nimport Music from './components/Music/Music';\nimport Video from './components/Video/Video';\nimport Security from './components/Security/Security';\nimport News from './components/News/News';\nimport Settings from './components/Settings/Settings';\nimport About_us from './components/About_us/About_us';\nimport UsersContainer from './components/Users/UsersContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {initializeApp} from './redux/app-reducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { withSuspence } from './components/hok/withSuspence';\n\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Импорт компоненты с помощью lazy компонент\n\n// import ProfileContainer from './components/Profile/ProfileContainer';\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer')); // Импорт компоненты с помощью lazy компонент\n\nclass App extends Component {\n  componentDidMount () {\n        this.props.initializeApp();\n    }\n  render() {\n    // Если не проиницилизировались, верни нам прелоадер -загрузки экран\n    if (!this.props.initialized) { \n    return <Preloader/>\n    }\n     return (\n             <div className= 'app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        \n        <div className='app-wrapper-content'>\n          <Route path='/dialogs' \n          render={withSuspence(DialogsContainer)}/>\n          \n          <Route path='/profile/:userID?'render={()=> {\n                return <Suspense fallback={<div>Loading...</div>}> \n                {/* Пока компонента загружается,видим Loading */}\n          <ProfileContainer  />\n          </Suspense>\n          }}/>     \n          {/* :UserId-Добавляем путь к пользователю в ссылку. ?-означает,что параметр может отсутствовать */}\n          <Route path='/login'render={()=><Login  />}/>    \n          <Route path='/users'render={()=><UsersContainer />}/>\n          <Route path='/music' component={Music}/>\n          <Route path='/video' component={Video}/>\n          <Route path='/news' component={News}/>\n          <Route path='/settings' component={Settings}/>\n          <Route path='/security' component={Security}/>\n          <Route path='/about_us' component={About_us}/>\n        </div>\n                      \n        </div>  \n    \n         );\n  }\n}\nconst mapStateToProps=(state)=> ({\n  initialized:state.app.initialized //Обращение к BLL проинициализированы мы или нет, добавили в список редьюсеров используемый, закомбайнили редьюсер app\n})\n\nexport default compose (\n  withRouter,\n  connect (mapStateToProps, {initializeApp})) (App);\n","import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const withSuspence=(Component)=> {\r\n\r\n  return (props)=> {\r\n  return  <Suspense fallback={<div>Loading...</div>}> \r\n  <Component {...props}/>\r\n  </Suspense>\r\n  };\r\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport store from './redux/redux-store';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\n\n//addPost('SAMURAIJS.COM');\n\n//  let rerenderEntireTree= (state)=> {\n    ReactDOM.render(\n        <BrowserRouter>\n        <Provider store={store}>\n        <App />\n        </Provider>\n        </BrowserRouter>, document.getElementById('root'));\n\n\n// }\n// rerenderEntireTree(store.getState()); -убрали с использованием ract-redux\n// store.subscribe(()=> {\n//     let state=store.getState();\n//     rerenderEntireTree(state);\n// });\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__ZfFZJ\",\"error\":\"FormsControls_error__1NGyt\",\"formSummaryError\":\"FormsControls_formSummaryError__1LP1z\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\n\r\n\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n    const hasError=meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span> {meta.error }</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const TextArea = (props) => {\r\n    const {input, meta, child, ...restProps}=props;\r\n        return <FormControl {...props}> <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps}=props;\r\n    return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/Ajux_loader.6281c6f4.gif\";","import React from 'react';\r\nimport Ajux_loader from '../../../assets/images/Ajux_loader.gif'\r\n\r\n\r\nlet Preloader=(props)=> {\r\nreturn <div>\r\n    <img src={Ajux_loader} style={{backgroundColor:''}}/>\r\n</div>\r\n}\r\n\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__t3wT3\",\"paginator\":\"Paginator_paginator__3aXhF\",\"pageNumber\":\"Paginator_pageNumber__2csjC\"};","export const required=value=> {\r\n    if(value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength)=> (value)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import { profileAPI, usersAPI } from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, post: 'Hello, I try to be better', likesCount: 12 },\r\n        { id: 2, post: 'Hello, its my second post', likesCount: 69 },\r\n        { id: 3, post: 'ZZzzzZZZZ', likesCount: 241 },\r\n        { id: 4, post: 'Yo!Yo!YO!', likesCount: 245 },\r\n        { id: 5, post: 'HEYYYY MAN', likesCount: 364 }],\r\n    // newPostText: ' ', //Упразднено, редакс формы\r\n    profile: null,\r\n    status: ' '\r\n};\r\n\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 6,\r\n                // post: state.newPostText,\r\n                post: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n            // stateCopy.posts=[...state.posts];\r\n            // stateCopy.posts.push(newPost);\r\n            // stateCopy.newPostText = '';\r\n            // return stateCopy;\r\n        }\r\n        // // case UPDATE_NEW_POST_TEXT: {\r\n        // //     return {\r\n        // //         ...state,\r\n        // //         newPostText: action.newText\r\n        // //     }; -упразднено редакс формы\r\n        //     // stateCopy.newPostText = action.newText;\r\n        //     // return stateCopy;\r\n        // }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        };\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        };\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postID)\r\n            }\r\n        };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText })\r\n// export const updateNewPostTextActionCreator = (text) => ({ type: UPDATE_NEW_POST_TEXT, newText: text })\r\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status })\r\nexport const deletePost = (postID) => ({ type: DELETE_POST, postID })\r\n\r\nexport const getUserProfile = (userID) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    const response = await usersAPI.getProfile(userID)\r\n    //    .then(response => {\r\n    dispatch(setUserProfile(response.data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n\r\n}\r\n\r\nexport const getStatus = (userID) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    let response = await profileAPI.getStatus(userID);\r\n    // .then(response => {\r\n    dispatch(setStatus(response.data)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    // });\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {  //Thunk creator -создаем санку\r\n    let response = await profileAPI.updateStatus(status)\r\n    // .then(response => {\r\n    if (response.data.resultCode === 0) { //Если в ответе на запрос пришел резалтКод=0, то ошибки нет,статус сменился, сетаем статус\r\n        dispatch(setStatus(status)); //ДИСПАТЧАНЬЕ ЭКШЕНОВ ПРИВОДИТ К ИЗМЕНЕНИЮ СТЭЙТА В РЕДЬЮСЕРЕ\r\n    }\r\n    // });\r\n}\r\n\r\n\r\n\r\nexport default profileReducer;"],"sourceRoot":""}