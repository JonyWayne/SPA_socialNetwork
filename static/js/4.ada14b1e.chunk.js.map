{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/Dialogs.module.css","components/Dialogs/Message/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","alert","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,MAAQ,yB,oBCAhLD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,MAAQ,yB,oBCAhLD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,MAAQ,yB,+KCYjKC,EATE,SAACC,GAChB,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,GAAKD,IAAEE,OAAlC,SACJ,eAAC,IAAD,CAASC,GAAI,YAAYL,EAAMM,GAA/B,UAAoCN,EAAMO,KAA1C,U,kBCMUC,EAPA,SAACR,GACd,OAAO,sBAAKC,UAAWC,IAAEC,OAAlB,cAA4BH,EAAMS,YC8ErCC,EAAYC,YAAiB,IAgB7BC,EAAoBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACb,GACtB,OACA,uBAAMe,SAAUf,EAAMgB,aAAtB,UACU,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAAUX,GACrBH,KAAK,iBAAiBe,YAAY,8GAIpC,8BAAK,oGAMAC,EA5FC,SAACvB,GACf,IAOIwB,EAAQxB,EAAMyB,YAqBdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAiBD,GAAIuB,EAAEvB,IAAZuB,EAAEvB,OAG1EwB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,SAAcuB,EAAE1B,OAE9DkB,EAAMS,eAkB3B,OAAoB,GAAhBjC,EAAMkC,OAAwB,cAAC,IAAD,CAAU7B,GAAI,WAG9C,sBAAKJ,UAAWC,IAAEyB,QAAlB,UACE,qBAAK1B,UAAWC,IAAEiC,aAAlB,SACGT,IAMH,qBAAKzB,UAAWC,IAAE6B,SAAlB,SAGE,8BAAMD,MAEN,cAAClB,EAAD,CAAqBG,SAtBP,SAACqB,GACnBC,MAAMD,EAAOH,gBACbjC,EAAMsC,YAAYF,EAAOH,uBCsBdM,sBACbC,aAvBkB,SAAChB,GACrB,MAAO,CACJC,YAAaD,EAAMC,gBAKC,SAACgB,GACtB,MAAO,CACLH,YAAa,SAACL,GACZQ,EAASC,YAAmBT,SAchCU,IAFaJ,CAGbhB","file":"static/js/4.ada14b1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__WVstR\",\"dialogsItems\":\"Dialogs_dialogsItems__2ViBs\",\"active\":\"Dialogs_active__1Z3fP\",\"messages\":\"Dialogs_messages__BZ0C8\",\"decor\":\"Dialogs_decor__vt8iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__31sbV\",\"dialogsItems\":\"Dialogs_dialogsItems__-DkUh\",\"active\":\"Dialogs_active__QdAVv\",\"messages\":\"Dialogs_messages__PmKt8\",\"decor\":\"Dialogs_decor__1C-Ay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__zMG5t\",\"dialogsItems\":\"Dialogs_dialogsItems__2OhqA\",\"active\":\"Dialogs_active__gag-Q\",\"messages\":\"Dialogs_messages__2BgTs\",\"decor\":\"Dialogs_decor__3LO0E\"};","import React from 'react';\r\nimport s from './/.//Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem=(props)=> {\r\n  return <div className={s.dialog + '' + s.active}>\r\n     <NavLink to={\"/dialogs/\"+props.id}>{props.name} </NavLink>\r\n  </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './/.//Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message= (props)=> {\r\n  return <div className={s.dialog}> {props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { TextArea } from '../Common/FormControl/FormsControls';\r\nimport { maxLengthCreator, required } from '../validators/validators';\r\nimport s from './/.//Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let newPostMessage = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании сообщения.Далее привяжем ссылку к текст Area */\r\n  let addmessage = () => {\r\n    let text = newPostMessage.current.value;\r\n    alert(text);\r\n  }\r\n  //  let state=props.store.getState().dialogsPage;\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  /*\r\n  let dialogs = [\r\n      {id:1, name:'Димасик'},\r\n      {id:2, name:'Евген'},\r\n      {id:3, name:'Искандер'},\r\n      {id:4, name:'Дон Дьябло'},\r\n      {id:5, name:'Андрей'}\r\n  ]\r\n  \r\n  \r\n  let messages = [\r\n    {id:1, message:'Привет!)'},\r\n    {id:2, message:'Как твои дела?'},\r\n    {id:3, message:'У тебя все получится!'},\r\n    {id:4, message:'Yo!Yo!YO!'},\r\n    {id:5, message:'HEYYYY MAN'},\r\n    {id:6, message:'Do you know? Enrique)'}\r\n  ]\r\n  */\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n  let newMessageBody = state.newMessageBody;                                  //МАПИМ,ДОСТАЕМ ИЗ ПРОПСОВ СООБЩЕНИЯ (ИЗ БИЗНЕС BLL УРОВНЯ ДОСТАЕМ)\r\n  // let onSendMessageClick = () => {\r\n  //   props.sendMessage();\r\n  //   // props.store.dispatch(sendMessageCreator());\r\n  // } //Заменили на addNewMessage\r\n  \r\n  // let onNewMessageChange = (e) => {\r\n  //   let body = e.target.value;\r\n  //   props.updateNewMessageBody(body);\r\n  //   // props.store.dispatch(updateNewMessageBodyCreator(body));                     //Благодаря Диспатчу меняется уровень бизнеса BLL уровень\r\n  // } //Обработчик события нам не нужен, так как стали использовать редакс форму\r\n\r\n  let addNewMessage = (values) => {\r\n    alert(values.newMessageBody);\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  \r\n  if (props.isAuth == false) return <Redirect to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n        {/* <DialogItem name={dialogs[0].name} id={dialogs[0].id}/>\r\n         <DialogItem name={dialogs[1].name} id={dialogs[1].id}/>*/}\r\n\r\n      </div>\r\n\r\n      <div className={s.messages}>\r\n        {/* <Message message={messagesData[0].message} id={messagesData[0].id}/> \r\n         <Message message={messagesData[1].message} id={messagesData[1].id }> */}\r\n        <div>{messagesElements}</div>\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\n\r\nconst AddMessageForm=(props)=> {\r\nreturn (\r\n<form onSubmit={props.handleSubmit}>\r\n          <div>\r\n            <Field component={TextArea} \r\n            validate={[required, maxLength50]}\r\n            name=\"newMessageBody\" placeholder=\"Напишите сообщение\" />\r\n            {/* <textarea value={newMessageBody} onChange={onNewMessageChange} placeholder='Напишите сообщение' ></textarea>  //Вызывает функцию onNewMessageChange по изменению текста */}\r\n            </div> \r\n          {/* <div><button onClick={onSendMessageClick}>Отправить</button></div> */}\r\n          <div><button>Отправить</button></div>\r\n        </form>\r\n)\r\n}\r\nconst AddMessageFormRedux=reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\r\nimport { withAuthRedirect } from '../hok/withAuthRedirect';\r\nimport Dialogs from './Dialogs';\r\n\r\n// const DialogsContainer = () => {\r\n//   let newPostMessage = React.createRef();  /* Создали пустую ссылку, в дальнейшем на нее будет ссылаться реакт при создании и написании сообщения.Далее привяжем ссылку к текст Area */\r\n//   let addmessage = () => {\r\n//     let text = newPostMessage.current.value;\r\n//     alert(text);\r\n//   }\r\n  \r\n//   /*\r\n//   let dialogs = [\r\n//       {id:1, name:'Димасик'},\r\n//       {id:2, name:'Евген'},\r\n//       {id:3, name:'Искандер'},\r\n//       {id:4, name:'Дон Дьябло'},\r\n//       {id:5, name:'Андрей'}\r\n//   ]\r\n  \r\n  \r\n//   let messages = [\r\n//     {id:1, message:'Привет!)'},\r\n//     {id:2, message:'Как твои дела?'},\r\n//     {id:3, message:'У тебя все получится!'},\r\n//     {id:4, message:'Yo!Yo!YO!'},\r\n//     {id:5, message:'HEYYYY MAN'},\r\n//     {id:6, message:'Do you know? Enrique)'}\r\n//   ]\r\n//   */\r\n//   // let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\r\n\r\n\r\n//   // let messagesElements = state.messages.map(m => <Message message={m.message} />);\r\n\r\n//   // let newMessageBody = state.newMessageBody;                                  //МАПИМ,ДОСТАЕМ ИЗ ПРОПСОВ СООБЩЕНИЯ (ИЗ БИЗНЕС BLL УРОВНЯ ДОСТАЕМ)\r\n \r\n//   return <StoreContext.Consumer>  \r\n//     { store => {\r\n//       // let state = store.getState().dialogsPage;\r\n//       let onSendMessageClick = () => {\r\n//        store.dispatch(sendMessageCreator());\r\n//       }\r\n//       let onNewMessageChange = (body) => {\r\n//         // let body=e.target.value;\r\n//         store.dispatch(updateNewMessageBodyCreator(body));                     //Благодаря Диспатчу меняется уровень бизнеса BLL уровень\r\n//       }\r\n    \r\n//       return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//         sendMessage={onSendMessageClick}\r\n//         dialogsPage={store.getState().dialogsPage} />\r\n//     }\r\n//   }\r\n//   </StoreContext.Consumer>\r\n// }\r\nlet mapStateToProps=(state)=> {                            //Фун-ция Connect из React-Redux библиотеки забирает State и передает сначала в КОНТЕЙНЕРНУЮ компоненту потом в презентационную компоненту\r\nreturn {\r\n   dialogsPage: state.dialogsPage,\r\n  //  isAuth:state.auth.isAuth   //берем информацию из стэйта (redux-store) (редьюсеры) залогинены мы или нет, если нет,сообщения прячем\r\n}\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=> {                                  //Фун-ция Connect из React-Redux библиотеки забирает колбэки-функции и передает сначала в КОНТЕЙНЕРНУЮ компоненту потом в презентационную компоненту\r\n  return {\r\n    sendMessage: (newMessageBody)=> {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }   \r\n    // updateNewMessageBody:(body)=> {\r\n    //   dispatch(updateNewMessageBodyCreator(body));   //не будем апдэйдить на каждый клик, используем форму редакса \r\n    // }\r\n  }\r\n}\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer= connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);   //По этим правилам законнекть презентационную компоненту к Store через Контейнерную компоненту\r\n\r\nexport default compose (\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n// DialogsContainer;"],"sourceRoot":""}